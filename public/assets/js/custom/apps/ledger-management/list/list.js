/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/ledger-management/list/list.js":
/*!*******************************************************************!*\
  !*** ../public/src/js/custom/apps/ledger-management/list/list.js ***!
  \*******************************************************************/
/***/ (() => {

eval("\r\n\r\n// Class definition\r\nvar KTGeneralLedgerList = (function () {\r\n  // Define shared variables\r\n  var datatable;\r\n  var filterDates;\r\n  var filterSupplier;\r\n  var filterBookingType;\r\n  var table;\r\n\r\n  // Private functions\r\n  var initGeneralLedgerList = function () {\r\n    // Set date data order\r\n    const tableRows = table.querySelectorAll(\"tbody tr\");\r\n\r\n    tableRows.forEach((row) => {\r\n      const dateRow = row.querySelectorAll(\"td\");\r\n      const realDate = moment(dateRow[5].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 5th column in table\r\n      dateRow[5].setAttribute(\"data-order\", realDate);\r\n    });\r\n\r\n    // Init datatable --- more info on datatables: https://datatables.net/manual/\r\n    datatable = $(table).DataTable({\r\n      info: false,\r\n      order: [],\r\n      columnDefs: [\r\n        { orderable: false, targets: 0 }, // Disable ordering on column 0 (checkbox)\r\n      ],\r\n    });\r\n\r\n    // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\r\n    datatable.on(\"draw\", function () {\r\n      initToggleToolbar();\r\n      handleDownloadRows();\r\n      toggleToolbars();\r\n      KTMenu.init(); // reinit KTMenu instances\r\n    });\r\n  };\r\n\r\n  // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n  var handleSearchDatatable = () => {\r\n    const filterSearch = document.querySelector(\r\n      '[data-kt-general-ledger-table-filter=\"search\"]'\r\n    );\r\n    filterSearch.addEventListener(\"keyup\", function (e) {\r\n      datatable.search(e.target.value).draw();\r\n    });\r\n  };\r\n\r\n  // Filter Datatable\r\n  var handleFilterDatatable = () => {\r\n    // Select filter options\r\n    filterBookingType = document.querySelector(\r\n      '[data-kt-general-ledger-table-filter=\"payment_type\"]'\r\n    );\r\n    filterSupplier = document.querySelector(\r\n      '[data-kt-general-ledger-table-filter=\"supplier\"]'\r\n    );\r\n    const filterButton = document.querySelector(\r\n      '[data-kt-general-ledger-table-filter=\"filter\"]'\r\n    );\r\n\r\n    // Filter datatable on submit\r\n    filterButton.addEventListener(\"click\", function () {\r\n      // Get filter values\r\n      let bookingTypeValue = filterBookingType.value;\r\n      let supplierValue = filterSupplier.value;\r\n\r\n      // Build filter string from filter options\r\n      let filterString = \"\";\r\n      if (bookingTypeValue !== \"\") {\r\n        filterString += bookingTypeValue;\r\n      }\r\n      if (supplierValue !== \"\") {\r\n        filterString += \" \" + supplierValue;\r\n      }\r\n\r\n      // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n      datatable.search(filterString).draw();\r\n    });\r\n  };\r\n\r\n  // Download general ledger rows\r\n  var handleDownloadRows = () => {\r\n    // Select all download buttons\r\n    const downloadButtons = table.querySelectorAll(\r\n      '[data-kt-general-ledger-table-filter=\"download_row\"]'\r\n    );\r\n\r\n    downloadButtons.forEach((d) => {\r\n      // Download button on click\r\n      d.addEventListener(\"click\", function (e) {\r\n        e.preventDefault();\r\n\r\n        // Select parent row\r\n        const parent = e.target.closest(\"tr\");\r\n\r\n        // Get general ledger name\r\n        const generalLedgerName = parent.querySelectorAll(\"td\")[1].innerText;\r\n\r\n        // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\r\n        Swal.fire({\r\n          text: \"Are you sure you want to download \" + generalLedgerName + \"?\",\r\n          icon: \"warning\",\r\n          showCancelButton: true,\r\n          buttonsStyling: false,\r\n          confirmButtonText: \"Yes, download!\",\r\n          cancelButtonText: \"No, cancel\",\r\n          customClass: {\r\n            confirmButton: \"btn fw-bold btn-danger\",\r\n            cancelButton: \"btn fw-bold btn-active-light-primary\",\r\n          },\r\n        }).then(function (result) {\r\n          if (result.value) {\r\n            Swal.fire({\r\n              text: \"You have downloaded \" + generalLedgerName + \"!.\",\r\n              icon: \"success\",\r\n              buttonsStyling: false,\r\n              confirmButtonText: \"Ok, got it!\",\r\n              customClass: {\r\n                confirmButton: \"btn fw-bold btn-primary\",\r\n              },\r\n            }).then(function () {\r\n              // Remove current row\r\n              datatable.row($(parent)).remove().draw();\r\n            });\r\n          } else if (result.dismiss === \"cancel\") {\r\n            Swal.fire({\r\n              text: generalLedgerName + \" was not downloaded.\",\r\n              icon: \"error\",\r\n              buttonsStyling: false,\r\n              confirmButtonText: \"Ok, got it!\",\r\n              customClass: {\r\n                confirmButton: \"btn fw-bold btn-primary\",\r\n              },\r\n            });\r\n          }\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  // Reset Filter\r\n  var handleResetForm = () => {\r\n    // Select reset button\r\n    const resetButton = document.querySelector(\r\n      '[data-kt-general-ledger-table-filter=\"reset\"]'\r\n    );\r\n\r\n    // Reset datatable\r\n    resetButton.addEventListener(\"click\", function () {\r\n      // Reset booking type\r\n      $(filterBookingType).val(null).trigger(\"change\");\r\n\r\n      // Reset supplier\r\n      $(filterSupplier).val(null).trigger(\"change\");\r\n\r\n      // Reset bookingType type\r\n      filterBookingType.value = \"\";\r\n\r\n      // Reset datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n      datatable.search(\"\").draw();\r\n    });\r\n  };\r\n\r\n  // Init toggle toolbar\r\n  var initToggleToolbar = () => {\r\n    // Toggle selected action toolbar\r\n    // Select all checkboxes\r\n    const checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\r\n\r\n    // Select elements\r\n    const downloadSelected = document.querySelector(\r\n      '[data-kt-general-ledger-table-select=\"download_selected\"]'\r\n    );\r\n\r\n    // Toggle download selected toolbar\r\n    checkboxes.forEach((c) => {\r\n      // Checkbox on click event\r\n      c.addEventListener(\"click\", function () {\r\n        setTimeout(function () {\r\n          toggleToolbars();\r\n        }, 50);\r\n      });\r\n    });\r\n\r\n    // Downloaded selected rows\r\n    downloadSelected.addEventListener(\"click\", function () {\r\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\r\n      Swal.fire({\r\n        text: \"Are you sure you want to download selected general ledger?\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        buttonsStyling: false,\r\n        confirmButtonText: \"Yes, download!\",\r\n        cancelButtonText: \"No, cancel\",\r\n        customClass: {\r\n          confirmButton: \"btn fw-bold btn-danger\",\r\n          cancelButton: \"btn fw-bold btn-active-light-primary\",\r\n        },\r\n      }).then(function (result) {\r\n        if (result.value) {\r\n          Swal.fire({\r\n            text: \"You have downloaded all selected general ledger!.\",\r\n            icon: \"success\",\r\n            buttonsStyling: false,\r\n            confirmButtonText: \"Ok, got it!\",\r\n            customClass: {\r\n              confirmButton: \"btn fw-bold btn-primary\",\r\n            },\r\n          }).then(function () {\r\n            // Remove header checked box\r\n            const headerCheckboxes =\r\n              table.querySelectorAll('[type=\"checkbox\"]');\r\n\r\n            headerCheckboxes.forEach((c) => {\r\n              c.checked = false;\r\n            });\r\n\r\n            // Remove selected action toolbar\r\n            toggleToolbars();\r\n\r\n            // Download selected general ledgers\r\n          });\r\n        } else if (result.dismiss === \"cancel\") {\r\n          Swal.fire({\r\n            text: \"Selected general ledger was not downloaded.\",\r\n            icon: \"error\",\r\n            buttonsStyling: false,\r\n            confirmButtonText: \"Ok, got it!\",\r\n            customClass: {\r\n              confirmButton: \"btn fw-bold btn-primary\",\r\n            },\r\n          });\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  // Toggle toolbars\r\n  const toggleToolbars = () => {\r\n    // Define variables\r\n    const toolbarBase = document.querySelector(\r\n      '[data-kt-general-ledger-table-toolbar=\"base\"]'\r\n    );\r\n    const toolbarSelected = document.querySelector(\r\n      '[data-kt-general-ledger-table-toolbar=\"selected\"]'\r\n    );\r\n    const selectedCount = document.querySelector(\r\n      '[data-kt-general-ledger-table-select=\"selected_count\"]'\r\n    );\r\n\r\n    // Select refreshed checkbox DOM elements\r\n    const allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\r\n\r\n    // Detect checkboxes state & count\r\n    let checkedState = false;\r\n    let count = 0;\r\n\r\n    // Count checked boxes\r\n    allCheckboxes.forEach((c) => {\r\n      if (c.checked) {\r\n        checkedState = true;\r\n        count++;\r\n      }\r\n    });\r\n\r\n    // Toggle toolbars\r\n    if (checkedState) {\r\n      selectedCount.innerHTML = count;\r\n      toolbarBase.classList.add(\"d-none\");\r\n      toolbarSelected.classList.remove(\"d-none\");\r\n    } else {\r\n      toolbarBase.classList.remove(\"d-none\");\r\n      toolbarSelected.classList.add(\"d-none\");\r\n    }\r\n  };\r\n\r\n  var initForm = function () {\r\n    const datepicker = document.querySelector(\r\n      '[data-kt-invoice-table-filter][name=\"date\"]'\r\n    );\r\n\r\n    // Handle datepicker range -- For more info on flatpickr plugin, please visit: https://flatpickr.js.org/\r\n    $(datepicker).flatpickr({\r\n      altInput: true,\r\n      altFormat: \"F j, Y\",\r\n      dateFormat: \"Y-m-d\",\r\n      mode: \"range\",\r\n    });\r\n  };\r\n\r\n  // Public methods\r\n  return {\r\n    init: function () {\r\n      table = document.querySelector(\"#kt_general_ledger_table\");\r\n\r\n      if (!table) {\r\n        return;\r\n      }\r\n\r\n      initGeneralLedgerList();\r\n      initToggleToolbar();\r\n      handleSearchDatatable();\r\n      handleFilterDatatable();\r\n      handleDownloadRows();\r\n      handleResetForm();\r\n      initForm();\r\n    },\r\n  };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n  KTGeneralLedgerList.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/ledger-management/list/list.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/ledger-management/list/list.js"]();
/******/ 	
/******/ })()
;