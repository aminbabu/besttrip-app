/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/payment-requests/request.js":
/*!****************************************************************!*\
  !*** ../public/src/js/custom/apps/payment-requests/request.js ***!
  \****************************************************************/
/***/ (() => {

eval("// Class definition\r\nconst KTPaymentRequests = (function () {\r\n    let element;\r\n    let submitButton;\r\n    let cancelButton;\r\n    let closeButton;\r\n    let validator;\r\n    let form;\r\n    let modal;\r\n    let approvedButtons;\r\n    let rejectedButtons;\r\n\r\n    // Init form inputs\r\n    const handleForm = function () {\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        validator = FormValidation.formValidation(form, {\r\n            fields: {\r\n                reason: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Reason is required',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            plugins: {\r\n                trigger: new FormValidation.plugins.Trigger(),\r\n                bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                    rowSelector: '.fv-row',\r\n                    eleInvalidClass: '',\r\n                    eleValidClass: '',\r\n                }),\r\n            },\r\n        });\r\n\r\n        // Action buttons\r\n        submitButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then((status) => {\r\n                    if (status == 'Valid') {\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable submit button whilst loading\r\n                        submitButton.disabled = true;\r\n\r\n                        // Check axios library docs: https://axios-http.com/docs/intro\r\n                        axios\r\n                            .patch(\r\n                                submitButton\r\n                                    .closest('form')\r\n                                    .getAttribute('action'),\r\n                                {\r\n                                    note: form.note.value,\r\n                                    status: 'rejected',\r\n                                }\r\n                            )\r\n                            .then((response) => {\r\n                                // hide modal\r\n                                modal.hide();\r\n\r\n                                if (response) {\r\n                                    // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                    Swal.fire({\r\n                                        text:\r\n                                            response?.data?.message ||\r\n                                            'Payment request has been changed to rejected!',\r\n                                        icon: 'success',\r\n                                        buttonsStyling: false,\r\n                                        confirmButtonText: 'Ok, got it!',\r\n                                        customClass: {\r\n                                            confirmButton: 'btn btn-primary',\r\n                                        },\r\n                                        allowOutsideClick: false,\r\n                                    }).then((result) => {\r\n                                        // Reset form\r\n                                        form.reset();\r\n\r\n                                        // Get redirect URL from the form\r\n                                        const redirectUrl = form.getAttribute(\r\n                                            'data-kt-redirect-url'\r\n                                        );\r\n\r\n                                        if (result.isConfirmed && redirectUrl) {\r\n                                            location.href = redirectUrl;\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                    Swal.fire({\r\n                                        text: 'Sorry, the email is incorrect, please try again.',\r\n                                        icon: 'error',\r\n                                        buttonsStyling: false,\r\n                                        confirmButtonText: 'Ok, got it!',\r\n                                        customClass: {\r\n                                            confirmButton: 'btn btn-primary',\r\n                                        },\r\n                                    });\r\n                                }\r\n                            })\r\n                            .catch((error) => {\r\n                                const errors = error.response?.data?.message\r\n                                    ? error.response?.data?.message\r\n                                    : error?.response?.data?.errors;\r\n\r\n                                Swal.fire({\r\n                                    html: `${\r\n                                        errors instanceof Array\r\n                                            ? `<ul class=\"text-start\">${Object.values(\r\n                                                  error.response.data.errors\r\n                                              )\r\n                                                  .map(\r\n                                                      (err) =>\r\n                                                          `<li>${err?.message}</li>`\r\n                                                  )\r\n                                                  .join('')}</ul>`\r\n                                            : errors\r\n                                    }`,\r\n                                    icon: 'error',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                });\r\n                            })\r\n                            .then(() => {\r\n                                // Hide loading indication\r\n                                submitButton.removeAttribute(\r\n                                    'data-kt-indicator'\r\n                                );\r\n\r\n                                // Enable button\r\n                                submitButton.disabled = false;\r\n                            });\r\n                    }\r\n                    Swal.fire({\r\n                        text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        cancelButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: 'Are you sure you would like to cancel?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: 'Yes, cancel it!',\r\n                cancelButtonText: 'No, return',\r\n                customClass: {\r\n                    confirmButton: 'btn btn-primary',\r\n                    cancelButton: 'btn btn-light',\r\n                },\r\n            }).then((result) => {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\r\n                    modal.hide(); // Hide modal\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: 'Your form has not been cancelled!.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        closeButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: 'Are you sure you would like to cancel?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: 'Yes, cancel it!',\r\n                cancelButtonText: 'No, return',\r\n                customClass: {\r\n                    confirmButton: 'btn btn-primary',\r\n                    cancelButton: 'btn btn-light',\r\n                },\r\n            }).then((result) => {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\r\n                    modal.hide(); // Hide modal\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: 'Your form has not been cancelled!.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    const handleRequestApproval = () => {\r\n        approvedButtons.forEach((button) => {\r\n            button.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                const url = button.getAttribute('href');\r\n\r\n                Swal.fire({\r\n                    text: 'Are you sure you would like to approve this payment request?',\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    buttonsStyling: false,\r\n                    confirmButtonText: 'Yes, approve it!',\r\n                    cancelButtonText: 'No, return',\r\n                    customClass: {\r\n                        confirmButton: 'btn btn-primary',\r\n                        cancelButton: 'btn btn-light',\r\n                    },\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        // Check axios library docs: https://axios-http.com/docs/intro\r\n                        axios\r\n                            .patch(url, { status: 'approved' })\r\n                            .then((response) => {\r\n                                // hide modal\r\n                                modal.hide();\r\n\r\n                                if (response) {\r\n                                    // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                    Swal.fire({\r\n                                        text: 'Payment request has been successfully approved!',\r\n                                        icon: 'success',\r\n                                        buttonsStyling: false,\r\n                                        confirmButtonText: 'Ok, got it!',\r\n                                        customClass: {\r\n                                            confirmButton: 'btn btn-primary',\r\n                                        },\r\n                                        allowOutsideClick: false,\r\n                                    }).then((result) => {\r\n                                        if (result.isConfirmed) {\r\n                                            location.href =\r\n                                                '/dashboard/payment-requests/requested';\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                    Swal.fire({\r\n                                        text: 'Sorry, the email is incorrect, please try again.',\r\n                                        icon: 'error',\r\n                                        buttonsStyling: false,\r\n                                        confirmButtonText: 'Ok, got it!',\r\n                                        customClass: {\r\n                                            confirmButton: 'btn btn-primary',\r\n                                        },\r\n                                    });\r\n                                }\r\n                            })\r\n                            .catch((error) => {\r\n                                const errors = error.response?.data?.message\r\n                                    ? error.response?.data?.message\r\n                                    : error?.response?.data?.errors;\r\n\r\n                                Swal.fire({\r\n                                    html: `${\r\n                                        errors instanceof Array\r\n                                            ? `<ul class=\"text-start\">${Object.values(\r\n                                                  error.response.data.errors\r\n                                              )\r\n                                                  .map(\r\n                                                      (err) =>\r\n                                                          `<li>${err?.message}</li>`\r\n                                                  )\r\n                                                  .join('')}</ul>`\r\n                                            : errors\r\n                                    }`,\r\n                                    icon: 'error',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                });\r\n                            });\r\n                    } else if (result.dismiss === 'cancel') {\r\n                        Swal.fire({\r\n                            text: 'You have cancelled the request!',\r\n                            icon: 'error',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn btn-primary',\r\n                            },\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    const handleRequestRejection = () => {\r\n        rejectedButtons.forEach((button) => {\r\n            button.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                const url = button.getAttribute('href');\r\n\r\n                form.setAttribute('action', url);\r\n            });\r\n        });\r\n    };\r\n\r\n    return {\r\n        // Public functions\r\n        init() {\r\n            // Elements\r\n            element = document.querySelector(\r\n                '#kt_modal_reject_payment_request'\r\n            );\r\n\r\n            if (!element) {\r\n                return;\r\n            }\r\n\r\n            modal = new bootstrap.Modal(element);\r\n\r\n            form = document.querySelector(\r\n                '#kt_modal_reject_payment_request_form'\r\n            );\r\n            submitButton = form.querySelector(\r\n                '[data-kt-reject-payment-request-modal-action=\"submit\"]'\r\n            );\r\n            cancelButton = form.querySelector(\r\n                '[data-kt-reject-payment-request-modal-action=\"cancel\"]'\r\n            );\r\n            closeButton = element.querySelector(\r\n                '[data-kt-reject-payment-request-modal-action=\"close\"]'\r\n            );\r\n            approvedButtons = document.querySelectorAll(\r\n                '[data-kt-payment-requests-approved-action=\"trigger\"]'\r\n            );\r\n            rejectedButtons = document.querySelectorAll(\r\n                '[data-kt-payment-requests-rejected-action=\"trigger\"]'\r\n            );\r\n\r\n            handleForm();\r\n            handleRequestApproval();\r\n            handleRequestRejection();\r\n        },\r\n    };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(() => {\r\n    KTPaymentRequests.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/payment-requests/request.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/payment-requests/request.js"]();
/******/ 	
/******/ })()
;