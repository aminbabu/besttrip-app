/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/booking-reference/update-booking-status.js":
/*!*******************************************************************************!*\
  !*** ../public/src/js/custom/apps/booking-reference/update-booking-status.js ***!
  \*******************************************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTModalUpdateBookingStatus = (function () {\n    var element;\n    var mainElement;\n    var submitButton;\n    var cancelButton;\n    var closeButton;\n    var validator;\n    var form;\n    var modal;\n    var url;\n    var umrahStatusText;\n\n    // Init form inputs\n    var initBookingStatusForm = function () {\n        // Init Datepicker --- For more info, please check Flatpickr's official documentation: https://flatpickr.js.org/\n        $('#kt_customer_birth_datepicker').flatpickr({\n            enableTime: false,\n            dateFormat: 'Y-m-d',\n            maxDate: 'today',\n        });\n\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validator = FormValidation.formValidation(form, {\n            fields: {\n                status: {\n                    validators: {\n                        notEmpty: {\n                            message: 'Booking status is required',\n                        },\n                    },\n                },\n            },\n            plugins: {\n                trigger: new FormValidation.plugins.Trigger(),\n                bootstrap: new FormValidation.plugins.Bootstrap5({\n                    rowSelector: '.fv-row',\n                    eleInvalidClass: '',\n                    eleValidClass: '',\n                }),\n            },\n        });\n\n        // Action buttons\n        submitButton.addEventListener('click', function (e) {\n            // Prevent default button action\n            e.preventDefault();\n\n            // Validate form before submit\n            if (validator) {\n                validator.validate().then(function (status) {\n                    console.log('validated!');\n\n                    if (status === 'Valid') {\n                        submitButton.setAttribute('data-kt-indicator', 'on');\n\n                        // Disable submit button whilst loading\n                        submitButton.disabled = true;\n\n                        // Prepare form data\n                        const formData = new FormData(form);\n\n                        // Check axios library docs: https://axios-http.com/docs/intro\n                        axios\n                            .patch(url, formData)\n                            .then((response) => {\n                                if (response) {\n                                    // Hide modal\n                                    modal.hide();\n\n                                    // Show success popup\n                                    Swal.fire({\n                                        text:\n                                            response?.data?.message ||\n                                            'Form has been successfully submitted!',\n                                        icon: 'success',\n                                        buttonsStyling: false,\n                                        confirmButtonText: 'Ok, got it!',\n                                        customClass: {\n                                            confirmButton: 'btn btn-primary',\n                                        },\n                                        allowOutsideClick: false,\n                                    }).then(() => {\n                                        // Reset form\n                                        form.reset();\n\n                                        umrahStatusText.innerHTML =\n                                            response?.data?.umrahBooking.status\n                                                .charAt(0)\n                                                .toUpperCase() +\n                                            response?.data?.umrahBooking.status.slice(\n                                                1\n                                            );\n                                    });\n                                } else {\n                                    // Show error popup\n                                    Swal.fire({\n                                        text: 'Sorry, looks like there are some errors detected, please try again.',\n                                        icon: 'error',\n                                        buttonsStyling: false,\n                                        confirmButtonText: 'Ok, got it!',\n                                        customClass: {\n                                            confirmButton: 'btn btn-primary',\n                                        },\n                                    });\n                                }\n                            })\n                            .catch((error) => {\n                                const errors = error.response?.data?.message\n                                    ? error.response?.data?.message\n                                    : error?.response?.data?.errors;\n\n                                Swal.fire({\n                                    html: `${\n                                        errors instanceof Array\n                                            ? `<ul class=\"text-start\">${Object.values(\n                                                  error.response.data.errors\n                                              )\n                                                  .map(\n                                                      (err) =>\n                                                          `<li>${err?.message}</li>`\n                                                  )\n                                                  .join('')}</ul>`\n                                            : errors\n                                    }`,\n                                    icon: 'error',\n                                    buttonsStyling: false,\n                                    confirmButtonText: 'Ok, got it!',\n                                    customClass: {\n                                        confirmButton: 'btn btn-primary',\n                                    },\n                                });\n                            })\n                            .then(() => {\n                                // Hide loading indication\n                                submitButton.removeAttribute(\n                                    'data-kt-indicator'\n                                );\n\n                                // Enable button\n                                submitButton.disabled = false;\n                            });\n                    } else {\n                        Swal.fire({\n                            text: 'Sorry, looks like there are some errors detected, please try again.',\n                            icon: 'error',\n                            buttonsStyling: false,\n                            confirmButtonText: 'Ok, got it!',\n                            customClass: {\n                                confirmButton: 'btn btn-primary',\n                            },\n                        });\n                    }\n                });\n            }\n        });\n\n        cancelButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            console.log(e.target);\n\n            Swal.fire({\n                text: 'Are you sure you would like to cancel?',\n                icon: 'warning',\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: 'Yes, cancel it!',\n                cancelButtonText: 'No, return',\n                customClass: {\n                    confirmButton: 'btn btn-primary',\n                    cancelButton: 'btn btn-active-light',\n                },\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\n                    modal.hide(); // Hide modal\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: 'Your form has not been cancelled!.',\n                        icon: 'error',\n                        buttonsStyling: false,\n                        confirmButtonText: 'Ok, got it!',\n                        customClass: {\n                            confirmButton: 'btn btn-primary',\n                        },\n                    });\n                }\n            });\n        });\n\n        closeButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            Swal.fire({\n                text: 'Are you sure you would like to cancel?',\n                icon: 'warning',\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: 'Yes, cancel it!',\n                cancelButtonText: 'No, return',\n                customClass: {\n                    confirmButton: 'btn btn-primary',\n                    cancelButton: 'btn btn-active-light',\n                },\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\n                    modal.hide(); // Hide modal\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: 'Your form has not been cancelled!.',\n                        icon: 'error',\n                        buttonsStyling: false,\n                        confirmButtonText: 'Ok, got it!',\n                        customClass: {\n                            confirmButton: 'btn btn-primary',\n                        },\n                    });\n                }\n            });\n        });\n    };\n\n    return {\n        // Public functions\n        init: function () {\n            // Elements\n            element = document.querySelector('#kt_modal_update_booking_status');\n\n            mainElement = document.querySelector('#kt_app_main');\n\n            if (!element) {\n                return;\n            }\n\n            modal = new bootstrap.Modal(element);\n\n            form = element.querySelector(\n                '#kt_modal_update_booking_status_form'\n            );\n            submitButton = form.querySelector(\n                '[data-kt-booking-status-modal-action=\"submit\"]'\n            );\n            umrahStatusText = document.querySelector(\n                '[data-kt-umrah-booking-status=\"umrah-status\"]'\n            );\n            url = submitButton.getAttribute('data-kt-booking-status-modal-url');\n            cancelButton = form.querySelector(\n                '[data-kt-booking-status-modal-action=\"cancel\"]'\n            );\n            closeButton = element.querySelector(\n                '[data-kt-booking-status-modal-action=\"close\"]'\n            );\n\n            initBookingStatusForm();\n        },\n    };\n})();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTModalUpdateBookingStatus.init();\n});\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/booking-reference/update-booking-status.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/booking-reference/update-booking-status.js"]();
/******/ 	
/******/ })()
;