/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/booking-reference/edit.js":
/*!**************************************************************!*\
  !*** ../public/src/js/custom/apps/booking-reference/edit.js ***!
  \**************************************************************/
/***/ (() => {

eval("\r\n\r\n// Class definition\r\nvar KTContentEditTraveler = (function () {\r\n    // Shared variables\r\n    const element = document.getElementById('kt_modal_edit_traveler');\r\n    const form = element.querySelector('#kt_modal_add_traveler_form');\r\n    const modal = new bootstrap.Modal(element);\r\n    var ktFileUploaderContent;\r\n\r\n    // Init edit modal\r\n    var KTContentEditTraveler = () => {\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(form, {\r\n            fields: {\r\n                travelerType: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Traveler Type is required',\r\n                        },\r\n                    },\r\n                },\r\n                firstName: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'First name is required',\r\n                        },\r\n                    },\r\n                },\r\n                lastName: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Last name is required',\r\n                        },\r\n                    },\r\n                },\r\n                gender: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Gender is required',\r\n                        },\r\n                    },\r\n                },\r\n                dateOfBirth: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Date of Birth is required',\r\n                        },\r\n                    },\r\n                },\r\n                country: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Country is required',\r\n                        },\r\n                    },\r\n                },\r\n                cityName: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'City is required',\r\n                        },\r\n                    },\r\n                },\r\n                passportNumber: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Passport Number is required',\r\n                        },\r\n                    },\r\n                },\r\n                documentIssueCountry: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Document Issue Country is required',\r\n                        },\r\n                    },\r\n                },\r\n                passportExpiryDate: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Passport Expiry Date is required',\r\n                        },\r\n                    },\r\n                },\r\n                presentAddress: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Present Address is required',\r\n                        },\r\n                    },\r\n                },\r\n                permanentAddress: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Permanent Address is required',\r\n                        },\r\n                    },\r\n                },\r\n                emergencyContactNo: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Emergency Contact Number is required',\r\n                        },\r\n                    },\r\n                },\r\n                phone: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Phone Number is required',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n\r\n            plugins: {\r\n                trigger: new FormValidation.plugins.Trigger(),\r\n                bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                    rowSelector: '.fv-row',\r\n                    eleInvalidClass: '',\r\n                    eleValidClass: '',\r\n                }),\r\n            },\r\n        });\r\n\r\n        // Initialize Flatpickr for Date Of Birth\r\n        flatpickr(\"input[name='dateOfBirth']\", {\r\n            dateFormat: 'Y-m-d',\r\n        });\r\n\r\n        // Initialize Flatpickr for Passport Expiry Date\r\n        flatpickr(\"input[name='passportExpiryDate']\", {\r\n            dateFormat: 'Y-m-d',\r\n        });\r\n\r\n        // Submit button handler\r\n        const submitButton = element.querySelector(\r\n            '[data-kt-edit-traveler-modal-action=\"submit\"]'\r\n        );\r\n\r\n        submitButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple clicks\r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate AJAX request (replace with actual AJAX call)\r\n                        axios\r\n                            .patch(\r\n                                form.getAttribute('action'),\r\n                                new FormData(form)\r\n                            )\r\n                            .then((response) => {\r\n                                if (response) {\r\n                                    // Hide modal\r\n                                    modal.hide();\r\n\r\n                                    return console.log(response);\r\n\r\n                                    // Show success message\r\n                                    Swal.fire({\r\n                                        text:\r\n                                            response?.data?.message ||\r\n                                            'Form has been successfully submitted!',\r\n                                        icon: 'success',\r\n                                        buttonsStyling: false,\r\n                                        confirmButtonText: 'Ok, got it!',\r\n                                        customClass: {\r\n                                            confirmButton: 'btn btn-primary',\r\n                                        },\r\n                                        allowOutsideClick: false,\r\n                                    }).then(() => {\r\n                                        // Reset form\r\n                                        form.reset();\r\n\r\n                                        // Get redirect URL from the form\r\n                                        const redirectUrl = form.getAttribute(\r\n                                            'data-kt-redirect-url'\r\n                                        );\r\n                                        if (redirectUrl) {\r\n                                            location.href = redirectUrl;\r\n                                        } else {\r\n                                            location.reload();\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    // Show error message\r\n                                    Swal.fire({\r\n                                        text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                                        icon: 'error',\r\n                                        buttonsStyling: false,\r\n                                        confirmButtonText: 'Ok, got it!',\r\n                                        customClass: {\r\n                                            confirmButton: 'btn btn-primary',\r\n                                        },\r\n                                    });\r\n                                }\r\n                            })\r\n                            .catch((error) => {\r\n                                const errors =\r\n                                    error.response?.data?.message ||\r\n                                    error?.response?.data?.errors;\r\n\r\n                                // Show error message\r\n                                Swal.fire({\r\n                                    html: `${\r\n                                        errors instanceof Array\r\n                                            ? `<ul class=\"text-start\">${errors\r\n                                                  .map(\r\n                                                      (err) =>\r\n                                                          `<li>${err?.message}</li>`\r\n                                                  )\r\n                                                  .join('')}</ul>`\r\n                                            : errors\r\n                                    }`,\r\n                                    icon: 'error',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                });\r\n                            })\r\n                            .then(() => {\r\n                                // Hide loading indication\r\n                                submitButton.removeAttribute(\r\n                                    'data-kt-indicator'\r\n                                );\r\n\r\n                                // Enable button\r\n                                submitButton.disabled = false;\r\n                            });\r\n                    } else {\r\n                        // Show validation error message\r\n                        Swal.fire({\r\n                            text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                            icon: 'error',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn btn-primary',\r\n                            },\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Cancel button handler\r\n        const cancelButton = element.querySelector(\r\n            '[data-kt-edit-traveler-modal-action=\"cancel\"]'\r\n        );\r\n        cancelButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: 'Are you sure you would like to cancel?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: 'Yes, cancel it!',\r\n                cancelButtonText: 'No, return',\r\n                customClass: {\r\n                    confirmButton: 'btn btn-primary',\r\n                    cancelButton: 'btn btn-active-light',\r\n                },\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\r\n                    modal.hide();\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: 'Your form has not been cancelled!.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Close button handler\r\n        const closeButton = element.querySelector(\r\n            '[data-kt-edit-traveler-modal-action=\"close\"]'\r\n        );\r\n\r\n        closeButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: 'Are you sure you would like to cancel?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: 'Yes, cancel it!',\r\n                cancelButtonText: 'No, return',\r\n                customClass: {\r\n                    confirmButton: 'btn btn-primary',\r\n                    cancelButton: 'btn btn-active-light',\r\n                },\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\r\n                    modal.hide();\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: 'Your form has not been cancelled!.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    // Init File Uploader\r\n    const initFileUploader = () => {\r\n        const handleFileInputChange = (input) => {\r\n            const previewContainer = input.closest('.kt-file-uploader');\r\n            const label = previewContainer.querySelector(\r\n                '.kt-file-uploader-label'\r\n            );\r\n            const maxFileSize = parseInt(\r\n                input.getAttribute('data-kt-file-uploader-max-size')\r\n            );\r\n            const invalidMessage =\r\n                previewContainer.querySelector('.invalid-feedback');\r\n            const file = input.files[0];\r\n\r\n            if (!file) {\r\n                return;\r\n            }\r\n\r\n            // remove error message\r\n            invalidMessage.classList.add('d-none');\r\n\r\n            // create preview element and append to the container\r\n            const preview = document.createElement('img');\r\n\r\n            if (file?.size > 1024 * 1024 * maxFileSize) {\r\n                const message = `File size should not exceed ${maxFileSize}MB`;\r\n\r\n                if (ktFileUploaderContent) {\r\n                    // restore label content\r\n                    label.innerHTML = ktFileUploaderContent;\r\n                }\r\n\r\n                // empty input value\r\n                input.value = '';\r\n\r\n                // append error message\r\n                invalidMessage.innerHTML = message;\r\n                invalidMessage.classList.remove('d-none');\r\n                return;\r\n            }\r\n\r\n            // add was-invalid class to the container\r\n            if (!previewContainer.classList.contains('was-invalided')) {\r\n                ktFileUploaderContent = label.innerHTML;\r\n                previewContainer.classList.add('was-invalided');\r\n            }\r\n\r\n            // remove content and append preview\r\n            label.innerHTML = '';\r\n            preview.classList.add('kt-file-uploader-preview');\r\n            preview.src = URL.createObjectURL(file);\r\n            preview.alt = file.name;\r\n            label.appendChild(preview);\r\n        };\r\n\r\n        form.addEventListener('change', function (event) {\r\n            const target = event.target;\r\n\r\n            // Check if the changed element is an input with type file\r\n            if (target.tagName === 'INPUT' && target.type === 'file') {\r\n                handleFileInputChange(target);\r\n            }\r\n        });\r\n    };\r\n\r\n    // Populate form data\r\n    const populateData = async () => {\r\n        const editButtons = document.querySelectorAll(\r\n            '[data-kt-content-traveler-table-filter=\"edit_row\"]'\r\n        );\r\n\r\n        if (!editButtons.length) {\r\n            return;\r\n        }\r\n\r\n        editButtons.forEach((button) => {\r\n            button.addEventListener('click', async () => {\r\n                const href = button.getAttribute('href');\r\n\r\n                try {\r\n                    const response = await axios.get(href);\r\n\r\n                    if (response) {\r\n                        const data = response.data.traveler;\r\n\r\n                        // Populate form fields with the fetched data\r\n                        $(form)\r\n                            .find('select[name=\"travelerType\"]')\r\n                            .val(data.travelerType)\r\n                            .trigger('change');\r\n                        $(form);\r\n                        form.querySelector('[name=\"firstName\"]').value =\r\n                            data.firstName;\r\n                        form.querySelector('[name=\"lastName\"]').value =\r\n                            data.lastName;\r\n                        $(form)\r\n                            .find('select[name=\"gender\"]')\r\n                            .val(data.gender)\r\n                            .trigger('change');\r\n                        $(form);\r\n                        const formattedDate = new Date(data.dateOfBirth)\r\n                            .toISOString()\r\n                            .split('T')[0];\r\n                        form.querySelector('[name=\"dateOfBirth\"]').value =\r\n                            formattedDate;\r\n                        form.querySelector('[name=\"country\"]').value =\r\n                            data.country;\r\n                        form.querySelector('[name=\"cityName\"]').value =\r\n                            data.cityName;\r\n                        form.querySelector('[name=\"passportNumber\"]').value =\r\n                            data.passportNumber;\r\n                        form.querySelector(\r\n                            '[name=\"documentIssueCountry\"]'\r\n                        ).value = data.documentIssueCountry;\r\n                        form.querySelector(\r\n                            '[name=\"passportExpiryDate\"]'\r\n                        ).value = new Date(data.passportExpiryDate)\r\n                            .toISOString()\r\n                            .split('T')[0];\r\n                        form.querySelector('[name=\"presentAddress\"]').value =\r\n                            data.presentAddress;\r\n                        form.querySelector('[name=\"permanentAddress\"]').value =\r\n                            data.permanentAddress;\r\n\r\n                        form.querySelector('[name=\"email\"]').value = data.email\r\n                            ? data?.email\r\n                            : '';\r\n\r\n                        form.querySelector(\r\n                            '[name=\"emergencyContactNo\"]'\r\n                        ).value = data.emergencyContactNo;\r\n                        form.querySelector('[name=\"phone\"]').value = data.phone;\r\n\r\n                        // Populate the file upload preview for passport\r\n                        const passportPreviewContainer = form\r\n                            .querySelector('#kt_file_uploader_edit_passport')\r\n                            .closest('.kt-file-uploader');\r\n                        const passportPreview = document.createElement('img');\r\n                        passportPreview.classList.add(\r\n                            'kt-file-uploader-preview'\r\n                        );\r\n                        passportPreview.src = data.passport;\r\n                        passportPreview.alt = 'passport image';\r\n                        passportPreviewContainer.querySelector(\r\n                            'label'\r\n                        ).innerHTML = '';\r\n                        passportPreviewContainer\r\n                            .querySelector('label')\r\n                            .appendChild(passportPreview);\r\n\r\n                        // Populate the file upload preview for traveler image\r\n                        const travelerImgPreviewContainer = form\r\n                            .querySelector(\r\n                                '#kt_file_uploader_edit_traveler_image'\r\n                            )\r\n                            .closest('.kt-file-uploader');\r\n                        const travelerImgPreview =\r\n                            document.createElement('img');\r\n                        travelerImgPreview.classList.add(\r\n                            'kt-file-uploader-preview'\r\n                        );\r\n                        travelerImgPreview.src = data.travelerPhoto;\r\n                        travelerImgPreview.alt = 'travelerImg image';\r\n                        travelerImgPreviewContainer.querySelector(\r\n                            'label'\r\n                        ).innerHTML = '';\r\n                        travelerImgPreviewContainer\r\n                            .querySelector('label')\r\n                            .appendChild(travelerImgPreview);\r\n\r\n                        // Populate the file upload preview for traveler nid image\r\n                        const travelerNIDPreviewContainer = form\r\n                            .querySelector(\r\n                                '#kt_file_uploader_edit_traveler_nid'\r\n                            )\r\n                            .closest('.kt-file-uploader');\r\n                        const travelerNIDPreview =\r\n                            document.createElement('img');\r\n                        travelerNIDPreview.classList.add(\r\n                            'kt-file-uploader-preview'\r\n                        );\r\n                        travelerNIDPreview.src = data.travelerNID;\r\n                        travelerNIDPreview.alt = 'travelerNID image';\r\n                        travelerNIDPreviewContainer.querySelector(\r\n                            'label'\r\n                        ).innerHTML = '';\r\n                        travelerNIDPreviewContainer\r\n                            .querySelector('label')\r\n                            .appendChild(travelerNIDPreview);\r\n\r\n                        // Populate the file upload preview for traveler covid certificate image\r\n                        const travelerCovidPreviewContainer = form\r\n                            .querySelector(\r\n                                '#kt_file_uploader_edit_traveler_covid_certificate'\r\n                            )\r\n                            .closest('.kt-file-uploader');\r\n                        const travelerCovidPreview =\r\n                            document.createElement('img');\r\n                        travelerCovidPreview.classList.add(\r\n                            'kt-file-uploader-preview'\r\n                        );\r\n                        travelerCovidPreview.src =\r\n                            data.travelerCovidCertificate;\r\n                        travelerCovidPreview.alt = 'travelerCovid image';\r\n                        travelerCovidPreviewContainer.querySelector(\r\n                            'label'\r\n                        ).innerHTML = '';\r\n                        travelerCovidPreviewContainer\r\n                            .querySelector('label')\r\n                            .appendChild(travelerCovidPreview);\r\n\r\n                        form.setAttribute('action', href);\r\n\r\n                        // Initialize file uploader after populating data\r\n                        initFileUploader();\r\n                    } else {\r\n                        Swal.fire({\r\n                            text: 'Failed to fetch data. Please try again later.',\r\n                            icon: 'error',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn btn-primary',\r\n                            },\r\n                        });\r\n                    }\r\n                } catch (error) {\r\n                    Swal.fire({\r\n                        text:\r\n                            error.response?.data?.message ||\r\n                            'Failed to fetch data. Please try again later.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    return {\r\n        // Public functions\r\n        init: function () {\r\n            KTContentEditTraveler();\r\n            initFileUploader();\r\n            populateData();\r\n        },\r\n    };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTContentEditTraveler.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/booking-reference/edit.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/booking-reference/edit.js"]();
/******/ 	
/******/ })()
;