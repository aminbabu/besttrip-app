/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/ecommerce/customers/listing/add.js":
/*!***********************************************************************!*\
  !*** ../public/src/js/custom/apps/ecommerce/customers/listing/add.js ***!
  \***********************************************************************/
/***/ (() => {

eval("\r\n\r\n// Class definition\r\nvar KTModalCustomersAdd = (function () {\r\n  var submitButton;\r\n  var cancelButton;\r\n  var closeButton;\r\n  var validator;\r\n  var form;\r\n  var modal;\r\n\r\n  // Init form inputs\r\n  var handleForm = function () {\r\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n    validator = FormValidation.formValidation(form, {\r\n      fields: {\r\n        name: {\r\n          validators: {\r\n            notEmpty: {\r\n              message: \"Customer name is required\",\r\n            },\r\n          },\r\n        },\r\n        email: {\r\n          validators: {\r\n            notEmpty: {\r\n              message: \"Customer email is required\",\r\n            },\r\n            regexp: {\r\n              regexp: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n              message: \"The value is not a valid email address\",\r\n            },\r\n          },\r\n        },\r\n        \"first-name\": {\r\n          validators: {\r\n            notEmpty: {\r\n              message: \"First name is required\",\r\n            },\r\n          },\r\n        },\r\n        \"last-name\": {\r\n          validators: {\r\n            notEmpty: {\r\n              message: \"Last name is required\",\r\n            },\r\n          },\r\n        },\r\n        country: {\r\n          validators: {\r\n            notEmpty: {\r\n              message: \"Country is required\",\r\n            },\r\n          },\r\n        },\r\n        address1: {\r\n          validators: {\r\n            notEmpty: {\r\n              message: \"Address 1 is required\",\r\n            },\r\n          },\r\n        },\r\n        city: {\r\n          validators: {\r\n            notEmpty: {\r\n              message: \"City is required\",\r\n            },\r\n          },\r\n        },\r\n        state: {\r\n          validators: {\r\n            notEmpty: {\r\n              message: \"State is required\",\r\n            },\r\n          },\r\n        },\r\n        postcode: {\r\n          validators: {\r\n            notEmpty: {\r\n              message: \"Postcode is required\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      plugins: {\r\n        trigger: new FormValidation.plugins.Trigger(),\r\n        bootstrap: new FormValidation.plugins.Bootstrap5({\r\n          rowSelector: \".fv-row\",\r\n          eleInvalidClass: \"\",\r\n          eleValidClass: \"\",\r\n        }),\r\n      },\r\n    });\r\n\r\n    // Revalidate country field. For more info, plase visit the official plugin site: https://select2.org/\r\n    $(form.querySelector('[name=\"country\"]')).on(\"change\", function () {\r\n      // Revalidate the field when an option is chosen\r\n      validator.revalidateField(\"country\");\r\n    });\r\n\r\n    // Action buttons\r\n    submitButton.addEventListener(\"click\", function (e) {\r\n      e.preventDefault();\r\n\r\n      // Validate form before submit\r\n      if (validator) {\r\n        validator.validate().then(function (status) {\r\n          if (status == \"Valid\") {\r\n            submitButton.setAttribute(\"data-kt-indicator\", \"on\");\r\n\r\n            // Disable submit button whilst loading\r\n            submitButton.disabled = true;\r\n\r\n            setTimeout(function () {\r\n              submitButton.removeAttribute(\"data-kt-indicator\");\r\n\r\n              Swal.fire({\r\n                text: \"Form has been successfully submitted!\",\r\n                icon: \"success\",\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Ok, got it!\",\r\n                customClass: {\r\n                  confirmButton: \"btn btn-primary\",\r\n                },\r\n              }).then(function (result) {\r\n                if (result.isConfirmed) {\r\n                  // Hide modal\r\n                  modal.hide();\r\n\r\n                  // Enable submit button after loading\r\n                  submitButton.disabled = false;\r\n\r\n                  // Redirect to customers list page\r\n                  window.location = form.getAttribute(\"data-kt-redirect\");\r\n                }\r\n              });\r\n            }, 2000);\r\n          } else {\r\n            Swal.fire({\r\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n              icon: \"error\",\r\n              buttonsStyling: false,\r\n              confirmButtonText: \"Ok, got it!\",\r\n              customClass: {\r\n                confirmButton: \"btn btn-primary\",\r\n              },\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    cancelButton.addEventListener(\"click\", function (e) {\r\n      e.preventDefault();\r\n\r\n      Swal.fire({\r\n        text: \"Are you sure you would like to cancel?\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        buttonsStyling: false,\r\n        confirmButtonText: \"Yes, cancel it!\",\r\n        cancelButtonText: \"No, return\",\r\n        customClass: {\r\n          confirmButton: \"btn btn-primary\",\r\n          cancelButton: \"btn btn-active-light\",\r\n        },\r\n      }).then(function (result) {\r\n        if (result.value) {\r\n          form.reset(); // Reset form\r\n          modal.hide(); // Hide modal\r\n        } else if (result.dismiss === \"cancel\") {\r\n          Swal.fire({\r\n            text: \"Your form has not been cancelled!.\",\r\n            icon: \"error\",\r\n            buttonsStyling: false,\r\n            confirmButtonText: \"Ok, got it!\",\r\n            customClass: {\r\n              confirmButton: \"btn btn-primary\",\r\n            },\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    closeButton.addEventListener(\"click\", function (e) {\r\n      e.preventDefault();\r\n\r\n      Swal.fire({\r\n        text: \"Are you sure you would like to cancel?\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        buttonsStyling: false,\r\n        confirmButtonText: \"Yes, cancel it!\",\r\n        cancelButtonText: \"No, return\",\r\n        customClass: {\r\n          confirmButton: \"btn btn-primary\",\r\n          cancelButton: \"btn btn-active-light\",\r\n        },\r\n      }).then(function (result) {\r\n        if (result.value) {\r\n          form.reset(); // Reset form\r\n          modal.hide(); // Hide modal\r\n        } else if (result.dismiss === \"cancel\") {\r\n          Swal.fire({\r\n            text: \"Your form has not been cancelled!.\",\r\n            icon: \"error\",\r\n            buttonsStyling: false,\r\n            confirmButtonText: \"Ok, got it!\",\r\n            customClass: {\r\n              confirmButton: \"btn btn-primary\",\r\n            },\r\n          });\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  return {\r\n    // Public functions\r\n    init: function () {\r\n      // Elements\r\n      modal = new bootstrap.Modal(\r\n        document.querySelector(\"#kt_modal_add_customer\")\r\n      );\r\n\r\n      form = document.querySelector(\"#kt_modal_add_customer_form\");\r\n      submitButton = form.querySelector(\"#kt_modal_add_customer_submit\");\r\n      cancelButton = form.querySelector(\"#kt_modal_add_customer_cancel\");\r\n      closeButton = form.querySelector(\"#kt_modal_add_customer_close\");\r\n\r\n      handleForm();\r\n    },\r\n  };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n  KTModalCustomersAdd.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/ecommerce/customers/listing/add.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/ecommerce/customers/listing/add.js"]();
/******/ 	
/******/ })()
;