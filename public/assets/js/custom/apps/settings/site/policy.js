/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/settings/site/policy.js":
/*!************************************************************!*\
  !*** ../public/src/js/custom/apps/settings/site/policy.js ***!
  \************************************************************/
/***/ (() => {

eval("\r\n\r\n// Class definition\r\nvar KTSettingsPolicy = (function () {\r\n    // Shared variables\r\n    const form = document.querySelector('#kt_settings_policy_form');\r\n    const editors = {};\r\n\r\n    if (!form) {\r\n        return;\r\n    }\r\n\r\n    // Init add schedule modal\r\n    var initSettingsPaymentAdd = () => {\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(form, {\r\n            fields: {},\r\n\r\n            plugins: {\r\n                trigger: new FormValidation.plugins.Trigger(),\r\n                bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                    rowSelector: '.fv-row',\r\n                    eleInvalidClass: '',\r\n                    eleValidClass: '',\r\n                }),\r\n            },\r\n        });\r\n\r\n        // Submit button handler\r\n        const submitButton = form.querySelector(\r\n            '[kt-settings-policy-form-action=\"submit\"]'\r\n        );\r\n        submitButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click\r\n                        submitButton.disabled = true;\r\n\r\n                        // Check axios library docs: https://axios-http.com/docs/intro\r\n                        axios\r\n                            .post(\r\n                                submitButton\r\n                                    .closest('form')\r\n                                    .getAttribute('action'),\r\n                                {\r\n                                    'about-us':\r\n                                        editors.kt_docs_ckeditor_about_us.getData(),\r\n                                    'terms-and-conditions':\r\n                                        editors.kt_docs_ckeditor_toc.getData(),\r\n                                    'refund-policy':\r\n                                        editors.kt_docs_ckeditor_refund_policy.getData(),\r\n                                    'privacy-policy':\r\n                                        editors.kt_docs_ckeditor_privacy_policy.getData(),\r\n                                }\r\n                            )\r\n                            .then((response) => {\r\n                                if (response) {\r\n                                    // Reset form\r\n                                    // form.reset();\r\n\r\n                                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                    Swal.fire({\r\n                                        text:\r\n                                            response?.data?.message ||\r\n                                            'Policy settings updated successfully.',\r\n                                        icon: 'success',\r\n                                        buttonsStyling: false,\r\n                                        confirmButtonText: 'Ok, got it!',\r\n                                        customClass: {\r\n                                            confirmButton: 'btn btn-primary',\r\n                                        },\r\n                                        allowOutsideClick: false,\r\n                                    }).then((result) => {\r\n                                        if (result.isConfirmed) {\r\n                                            // Reload page to see changes\r\n                                            // window.location.reload();\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                    Swal.fire({\r\n                                        text:\r\n                                            response?.data?.message ||\r\n                                            'Sorry, something went wrong. Please try again.',\r\n                                        icon: 'error',\r\n                                        buttonsStyling: false,\r\n                                        confirmButtonText: 'Ok, got it!',\r\n                                        customClass: {\r\n                                            confirmButton: 'btn btn-primary',\r\n                                        },\r\n                                    });\r\n                                }\r\n                            })\r\n                            .catch((error) => {\r\n                                const errors = error.response?.data?.message\r\n                                    ? error.response?.data?.message\r\n                                    : error?.response?.data?.errors;\r\n\r\n                                Swal.fire({\r\n                                    html: `${\r\n                                        errors instanceof Array\r\n                                            ? `<ul class=\"text-start\">${Object.values(\r\n                                                  error.response.data.errors\r\n                                              )\r\n                                                  .map(\r\n                                                      (err) =>\r\n                                                          `<li>${err?.message}</li>`\r\n                                                  )\r\n                                                  .join('')}</ul>`\r\n                                            : errors\r\n                                    }`,\r\n                                    icon: 'error',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                });\r\n                            })\r\n                            .then(() => {\r\n                                // Hide loading indication\r\n                                submitButton.removeAttribute(\r\n                                    'data-kt-indicator'\r\n                                );\r\n\r\n                                // Enable button\r\n                                submitButton.disabled = false;\r\n                            });\r\n                    } else {\r\n                        // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        Swal.fire({\r\n                            text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                            icon: 'error',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn btn-primary',\r\n                            },\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    class CKEditorUploadAdapter {\r\n        constructor(loader) {\r\n            this.loader = loader;\r\n        }\r\n\r\n        // Starts the upload process.\r\n        upload() {\r\n            return this.loader.file.then(\r\n                (file) =>\r\n                    new Promise((resolve, reject) => {\r\n                        this._initRequest();\r\n                        this._initListeners(resolve, reject, file);\r\n                        this._sendRequest(file);\r\n                    })\r\n            );\r\n        }\r\n\r\n        // Aborts the upload process.\r\n        abort() {\r\n            if (this.xhr) {\r\n                this.xhr.abort();\r\n            }\r\n        }\r\n\r\n        // Initializes XMLHttpRequest.\r\n        _initRequest() {\r\n            this.xhr = new XMLHttpRequest();\r\n            this.xhr.open('POST', '/api/settings/site/policy/media', true);\r\n            this.xhr.responseType = 'json';\r\n        }\r\n\r\n        // Initializes listeners for XMLHttpRequest.\r\n        _initListeners(resolve, reject, file) {\r\n            const xhr = this.xhr;\r\n            const loader = this.loader;\r\n            const genericErrorText = `Couldn't upload file: ${file.name}.`;\r\n\r\n            xhr.addEventListener('error', () => reject(genericErrorText));\r\n            xhr.addEventListener('abort', () => reject());\r\n            xhr.addEventListener('load', () => {\r\n                const response = xhr.response;\r\n\r\n                if (!response || response.error) {\r\n                    return reject(\r\n                        response && response.error\r\n                            ? response.error.message\r\n                            : genericErrorText\r\n                    );\r\n                }\r\n\r\n                resolve({\r\n                    default: response.url,\r\n                });\r\n            });\r\n\r\n            if (xhr.upload) {\r\n                xhr.upload.addEventListener('progress', (evt) => {\r\n                    if (evt.lengthComputable) {\r\n                        loader.uploadTotal = evt.total;\r\n                        loader.uploaded = evt.loaded;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        // Sends the request.\r\n        _sendRequest(file) {\r\n            const data = new FormData();\r\n            data.append('upload', file);\r\n            this.xhr.send(data);\r\n        }\r\n    }\r\n\r\n    function CKEditorUploadAdapterPlugin(editor) {\r\n        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {\r\n            return new CKEditorUploadAdapter(loader);\r\n        };\r\n    }\r\n\r\n    // CKEditors\r\n    const initCKEditors = () => {\r\n        const textareas = [\r\n            'kt_docs_ckeditor_about_us',\r\n            'kt_docs_ckeditor_toc',\r\n            'kt_docs_ckeditor_refund_policy',\r\n            'kt_docs_ckeditor_privacy_policy',\r\n        ];\r\n\r\n        textareas.forEach((id) => {\r\n            ClassicEditor.create(document.getElementById(id), {\r\n                extraPlugins: [CKEditorUploadAdapterPlugin],\r\n            })\r\n                .then((editor) => {\r\n                    editors[id] = editor;\r\n                })\r\n                .catch((error) => {\r\n                    console.error(error);\r\n                });\r\n        });\r\n    };\r\n\r\n    return {\r\n        // Public functions\r\n        init: function () {\r\n            initSettingsPaymentAdd();\r\n            initCKEditors();\r\n        },\r\n    };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTSettingsPolicy.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/settings/site/policy.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/settings/site/policy.js"]();
/******/ 	
/******/ })()
;