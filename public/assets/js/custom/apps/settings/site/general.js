/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/settings/site/general.js":
/*!*************************************************************!*\
  !*** ../public/src/js/custom/apps/settings/site/general.js ***!
  \*************************************************************/
/***/ (() => {

eval("\r\n\r\n// Class definition\r\nvar KTSettingsGeneral = (function () {\r\n    // Shared variables\r\n    const form = document.querySelector('#kt_settings_general_form');\r\n    var fileInputs;\r\n    var ktFileUploaderContent;\r\n\r\n    if (!form) {\r\n        return;\r\n    }\r\n\r\n    // Init add schedule modal\r\n    var initSettingsPaymentAdd = () => {\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(form, {\r\n            fields: {\r\n                title: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Website name is required',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n\r\n            plugins: {\r\n                trigger: new FormValidation.plugins.Trigger(),\r\n                bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                    rowSelector: '.fv-row',\r\n                    eleInvalidClass: '',\r\n                    eleValidClass: '',\r\n                }),\r\n            },\r\n        });\r\n\r\n        // Submit button handler\r\n        const submitButton = form.querySelector(\r\n            '[kt-settings-general-form-action=\"submit\"]'\r\n        );\r\n        submitButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click\r\n                        submitButton.disabled = true;\r\n\r\n                        // Prepare form data\r\n                        const formData = new FormData(form);\r\n\r\n                        formData\r\n                            .getAll('domains[]')\r\n                            .forEach((domain, index) => {\r\n                                formData.set(\r\n                                    `domains[${index}]`,\r\n                                    domain.trim()\r\n                                );\r\n                            });\r\n\r\n                        // Check axios library docs: https://axios-http.com/docs/intro\r\n                        axios\r\n                            .post(\r\n                                submitButton\r\n                                    .closest('form')\r\n                                    .getAttribute('action'),\r\n                                formData\r\n                            )\r\n                            .then((response) => {\r\n                                if (response) {\r\n                                    // Reset form\r\n                                    // form.reset();\r\n\r\n                                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                    Swal.fire({\r\n                                        text:\r\n                                            response?.data?.message ||\r\n                                            'General settings updated successfully.',\r\n                                        icon: 'success',\r\n                                        buttonsStyling: false,\r\n                                        confirmButtonText: 'Ok, got it!',\r\n                                        customClass: {\r\n                                            confirmButton: 'btn btn-primary',\r\n                                        },\r\n                                        allowOutsideClick: false,\r\n                                    }).then((result) => {\r\n                                        if (result.isConfirmed) {\r\n                                            // Reload page to see changes\r\n                                            // window.location.reload();\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                    Swal.fire({\r\n                                        text:\r\n                                            response?.data?.message ||\r\n                                            'Sorry, something went wrong. Please try again.',\r\n                                        icon: 'error',\r\n                                        buttonsStyling: false,\r\n                                        confirmButtonText: 'Ok, got it!',\r\n                                        customClass: {\r\n                                            confirmButton: 'btn btn-primary',\r\n                                        },\r\n                                    });\r\n                                }\r\n                            })\r\n                            .catch((error) => {\r\n                                const errors = error.response?.data?.message\r\n                                    ? error.response?.data?.message\r\n                                    : error?.response?.data?.errors;\r\n\r\n                                Swal.fire({\r\n                                    html: `${\r\n                                        errors instanceof Array\r\n                                            ? `<ul class=\"text-start\">${Object.values(\r\n                                                  error.response.data.errors\r\n                                              )\r\n                                                  .map(\r\n                                                      (err) =>\r\n                                                          `<li>${err?.message}</li>`\r\n                                                  )\r\n                                                  .join('')}</ul>`\r\n                                            : errors\r\n                                    }`,\r\n                                    icon: 'error',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                });\r\n                            })\r\n                            .then(() => {\r\n                                // Hide loading indication\r\n                                submitButton.removeAttribute(\r\n                                    'data-kt-indicator'\r\n                                );\r\n\r\n                                // Enable button\r\n                                submitButton.disabled = false;\r\n                            });\r\n                    } else {\r\n                        // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        Swal.fire({\r\n                            text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                            icon: 'error',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn btn-primary',\r\n                            },\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    // Init File Uploader\r\n    const initFileUploader = () => {\r\n        fileInputs = Array.from(\r\n            document.querySelectorAll('input[type=\"file\"]')\r\n        );\r\n\r\n        fileInputs.forEach((input) => {\r\n            let error;\r\n            const previewContainer = input.closest('.kt-file-uploader');\r\n            const label = previewContainer.querySelector(\r\n                '.kt-file-uploader-label'\r\n            );\r\n            ktFileUploaderContent = label.innerHTML;\r\n            const maxFileSize = parseInt(\r\n                input.getAttribute('data-kt-file-uploader-max-size')\r\n            );\r\n\r\n            // preview image using URL.createObjectURL\r\n            input.addEventListener('change', function () {\r\n                const file = input.files[0];\r\n\r\n                if (!file) {\r\n                    return;\r\n                }\r\n\r\n                // create preview element and append to the container\r\n                const preview = document.createElement('img');\r\n\r\n                if (error) {\r\n                    error.remove();\r\n                }\r\n\r\n                if (file?.size > 1024 * 1024 * maxFileSize) {\r\n                    // create error message\r\n                    error = document.createElement('div');\r\n                    error.classList.add('text-danger', 'mt-2');\r\n                    error.innerText = `File size should not exceed ${maxFileSize}MB`;\r\n\r\n                    // restore label content\r\n                    label.innerHTML = ktFileUploaderContent;\r\n\r\n                    // empty input value\r\n                    input.value = '';\r\n\r\n                    // append error message\r\n                    previewContainer.appendChild(error);\r\n                    return;\r\n                }\r\n\r\n                // remove content and append preview\r\n                label.innerHTML = '';\r\n                preview.classList.add('kt-file-uploader-preview', 'mx-auto');\r\n                preview.src = URL.createObjectURL(file);\r\n                preview.alt = file.name;\r\n                label.appendChild(preview);\r\n            });\r\n        });\r\n    };\r\n\r\n    return {\r\n        // Public functions\r\n        init: function () {\r\n            initSettingsPaymentAdd();\r\n            initFileUploader();\r\n        },\r\n    };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTSettingsGeneral.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/settings/site/general.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/settings/site/general.js"]();
/******/ 	
/******/ })()
;