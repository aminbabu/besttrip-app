/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/settings/content/sections/update.js":
/*!************************************************************************!*\
  !*** ../public/src/js/custom/apps/settings/content/sections/update.js ***!
  \************************************************************************/
/***/ (() => {

eval("\r\n\r\n// Class definition\r\nvar KTAppSettings = (function () {\r\n    // Shared variables\r\n    var fileInputs;\r\n    var ktFileUploaderContent;\r\n\r\n    // Private functions\r\n    const initForms = () => {\r\n        const forms = [\r\n            'kt_settings_content_hotels_form',\r\n            'kt_settings_content_destinations_form',\r\n            'kt_settings_content_umrah_&_ziyarah_form',\r\n            'kt_settings_content_beautiful_places_form',\r\n        ];\r\n\r\n        // Init all forms\r\n        forms.forEach((formId) => {\r\n            // Select form\r\n            const form = document.getElementById(formId);\r\n\r\n            if (!form) {\r\n                return;\r\n            }\r\n\r\n            // Dynamically create validation non-empty rule\r\n            const requiredFields = form.querySelectorAll('.required');\r\n            var detectedField;\r\n            var validationFields = {\r\n                fields: {},\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: '',\r\n                    }),\r\n                },\r\n            };\r\n\r\n            // Detect required fields\r\n            requiredFields.forEach((el) => {\r\n                const input = el.closest('.row').querySelector('input');\r\n                if (input) {\r\n                    detectedField = input;\r\n                }\r\n\r\n                const textarea = el.closest('.row').querySelector('textarea');\r\n                if (textarea) {\r\n                    detectedField = textarea;\r\n                }\r\n\r\n                const select = el.closest('.row').querySelector('select');\r\n                if (select) {\r\n                    detectedField = select;\r\n                }\r\n\r\n                // Add validation rule\r\n                const name = detectedField?.getAttribute('name');\r\n                validationFields.fields[name] = {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: el.innerText + ' is required',\r\n                        },\r\n                    },\r\n                };\r\n            });\r\n\r\n            // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n            var validator = FormValidation.formValidation(\r\n                form,\r\n                validationFields\r\n            );\r\n\r\n            // Submit button handler\r\n            const submitButton = form.querySelector(\r\n                '[data-kt-settings-type=\"submit\"]'\r\n            );\r\n            submitButton.addEventListener('click', function (e) {\r\n                // Prevent default button action\r\n                e.preventDefault();\r\n\r\n                // Validate form before submit\r\n                if (validator) {\r\n                    validator.validate().then(function (status) {\r\n                        if (status == 'Valid') {\r\n                            // Show loading indication\r\n                            submitButton.setAttribute(\r\n                                'data-kt-indicator',\r\n                                'on'\r\n                            );\r\n\r\n                            // Disable button to avoid multiple click\r\n                            submitButton.disabled = true;\r\n\r\n                            // Check axios library docs: https://axios-http.com/docs/intro\r\n                            axios\r\n                                .post(\r\n                                    submitButton\r\n                                        .closest('form')\r\n                                        .getAttribute('action'),\r\n                                    new FormData(form)\r\n                                )\r\n                                .then((response) => {\r\n                                    if (response) {\r\n                                        // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                        Swal.fire({\r\n                                            text:\r\n                                                response?.data?.message ||\r\n                                                'Form has been successfully submitted!',\r\n                                            icon: 'success',\r\n                                            buttonsStyling: false,\r\n                                            confirmButtonText: 'Ok, got it!',\r\n                                            customClass: {\r\n                                                confirmButton:\r\n                                                    'btn btn-primary',\r\n                                            },\r\n                                            allowOutsideClick: false,\r\n                                        }).then(() => {\r\n                                            // Reset form\r\n                                            // form.reset();\r\n\r\n                                            // Get redirect URL from the form\r\n                                            const redirectUrl =\r\n                                                form.getAttribute(\r\n                                                    'data-kt-redirect-url'\r\n                                                );\r\n\r\n                                            if (redirectUrl) {\r\n                                                location.href = redirectUrl;\r\n                                            } else {\r\n                                                // location.reload();\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                        Swal.fire({\r\n                                            text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                                            icon: 'error',\r\n                                            buttonsStyling: false,\r\n                                            confirmButtonText: 'Ok, got it!',\r\n                                            customClass: {\r\n                                                confirmButton:\r\n                                                    'btn btn-primary',\r\n                                            },\r\n                                        });\r\n                                    }\r\n                                })\r\n                                .catch((error) => {\r\n                                    console.log(error);\r\n                                    const errors = error.response?.data?.message\r\n                                        ? error.response?.data?.message\r\n                                        : error?.response?.data?.errors;\r\n\r\n                                    Swal.fire({\r\n                                        html: `${\r\n                                            errors instanceof Array\r\n                                                ? `<ul class=\"text-start\">${Object.values(\r\n                                                      error.response.data.errors\r\n                                                  )\r\n                                                      .map(\r\n                                                          (err) =>\r\n                                                              `<li>${err?.message}</li>`\r\n                                                      )\r\n                                                      .join('')}</ul>`\r\n                                                : errors\r\n                                        }`,\r\n                                        icon: 'error',\r\n                                        buttonsStyling: false,\r\n                                        confirmButtonText: 'Ok, got it!',\r\n                                        customClass: {\r\n                                            confirmButton: 'btn btn-primary',\r\n                                        },\r\n                                    });\r\n                                })\r\n                                .then(() => {\r\n                                    // Hide loading indication\r\n                                    submitButton.removeAttribute(\r\n                                        'data-kt-indicator'\r\n                                    );\r\n\r\n                                    // Enable button\r\n                                    submitButton.disabled = false;\r\n                                });\r\n                        } else {\r\n                            // Show popup error\r\n                            Swal.fire({\r\n                                text: 'Oops! There are some error(s) detected.',\r\n                                icon: 'error',\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: 'Ok, got it!',\r\n                                customClass: {\r\n                                    confirmButton: 'btn btn-primary',\r\n                                },\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    // Public methods\r\n    return {\r\n        init: function () {\r\n            initForms();\r\n        },\r\n    };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTAppSettings.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/settings/content/sections/update.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/settings/content/sections/update.js"]();
/******/ 	
/******/ })()
;