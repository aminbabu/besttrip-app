/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/settings/theme.js":
/*!******************************************************!*\
  !*** ../public/src/js/custom/apps/settings/theme.js ***!
  \******************************************************/
/***/ (() => {

eval("\r\n\r\n// Class definition\r\nvar KTAppThemeSettings = (function () {\r\n  // Shared variables\r\n  var fileInputs;\r\n  var ktFileUploaderContent;\r\n\r\n  // Private functions\r\n  const initForms = () => {\r\n    const forms = [\r\n      \"kt_settings_theme_general_form\",\r\n      \"kt_settings_theme_alternative_form\",\r\n    ];\r\n\r\n    // Init all forms\r\n    forms.forEach((formId) => {\r\n      // Select form\r\n      const form = document.getElementById(formId);\r\n\r\n      if (!form) {\r\n        return;\r\n      }\r\n\r\n      // Dynamically create validation non-empty rule\r\n      const requiredFields = form.querySelectorAll(\".required\");\r\n      var detectedField;\r\n      var validationFields = {\r\n        fields: {\r\n          title: {\r\n            validators: {\r\n              notEmpty: {\r\n                message: \"Title is required\",\r\n              },\r\n            },\r\n          },\r\n          description: {\r\n            validators: {\r\n              notEmpty: {\r\n                message: \"Description is required\",\r\n              },\r\n            },\r\n          },\r\n          illustration: {\r\n            validators: {\r\n              notEmpty: {\r\n                message: \"Illustration is required\",\r\n              },\r\n            },\r\n          },\r\n          background_media: {\r\n            validators: {\r\n              notEmpty: {\r\n                message: \"Background media is required\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n        plugins: {\r\n          trigger: new FormValidation.plugins.Trigger(),\r\n          bootstrap: new FormValidation.plugins.Bootstrap5({\r\n            rowSelector: \".fv-row\",\r\n            eleInvalidClass: \"\",\r\n            eleValidClass: \"\",\r\n          }),\r\n        },\r\n      };\r\n\r\n      // Detect required fields\r\n      requiredFields.forEach((el) => {\r\n        const input = el.closest(\".row\").querySelector(\"input\");\r\n        if (input) {\r\n          detectedField = input;\r\n        }\r\n\r\n        const textarea = el.closest(\".row\").querySelector(\"textarea\");\r\n        if (textarea) {\r\n          detectedField = textarea;\r\n        }\r\n\r\n        const select = el.closest(\".row\").querySelector(\"select\");\r\n        if (select) {\r\n          detectedField = select;\r\n        }\r\n\r\n        // Add validation rule\r\n        const name = detectedField?.getAttribute(\"name\");\r\n        validationFields.fields[name] = {\r\n          validators: {\r\n            notEmpty: {\r\n              message: el.innerText + \" is required\",\r\n            },\r\n          },\r\n        };\r\n      });\r\n\r\n      // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n      var validator = FormValidation.formValidation(form, validationFields);\r\n\r\n      // Submit button handler\r\n      const submitButton = form.querySelector(\r\n        '[data-kt-settings-theme-type=\"submit\"]'\r\n      );\r\n      submitButton.addEventListener(\"click\", function (e) {\r\n        // Prevent default button action\r\n        e.preventDefault();\r\n\r\n        // Validate form before submit\r\n        if (validator) {\r\n          validator.validate().then(function (status) {\r\n            if (status == \"Valid\") {\r\n              // Show loading indication\r\n              submitButton.setAttribute(\"data-kt-indicator\", \"on\");\r\n\r\n              // Disable button to avoid multiple click\r\n              submitButton.disabled = true;\r\n\r\n              // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n              setTimeout(function () {\r\n                // Remove loading indication\r\n                submitButton.removeAttribute(\"data-kt-indicator\");\r\n\r\n                // Enable button\r\n                submitButton.disabled = false;\r\n\r\n                // Show popup confirmation\r\n                Swal.fire({\r\n                  text: \"Form has been successfully submitted!\",\r\n                  icon: \"success\",\r\n                  buttonsStyling: false,\r\n                  confirmButtonText: \"Ok, got it!\",\r\n                  customClass: {\r\n                    confirmButton: \"btn btn-primary\",\r\n                  },\r\n                });\r\n\r\n                // Reset file inputs after submit\r\n                fileInputs.forEach((input) => {\r\n                  const previewContainer = input.closest(\".kt-file-uploader\");\r\n                  const label = previewContainer.querySelector(\r\n                    \".kt-file-uploader-label\"\r\n                  );\r\n\r\n                  input.value = \"\";\r\n                  label.innerHTML = ktFileUploaderContent;\r\n                });\r\n\r\n                form.reset(); // Reset form to default state\r\n\r\n                // form.submit(); // Submit form\r\n              }, 2000);\r\n            } else {\r\n              // Show popup error\r\n              Swal.fire({\r\n                text: \"Oops! There are some error(s) detected.\",\r\n                icon: \"error\",\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Ok, got it!\",\r\n                customClass: {\r\n                  confirmButton: \"btn btn-primary\",\r\n                },\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  // Init Tagify\r\n  const initTagify = () => {\r\n    // Get tagify elements\r\n    const elements = document.querySelectorAll(\r\n      '[data-kt-settings-type=\"tagify\"]'\r\n    );\r\n\r\n    // Init tagify\r\n    elements.forEach((element) => {\r\n      new Tagify(element);\r\n    });\r\n  };\r\n\r\n  // Init Select2 with flags\r\n  const initSelect2Flags = () => {\r\n    // Format options\r\n    const optionFormat = (item) => {\r\n      if (!item.id) {\r\n        return item.text;\r\n      }\r\n\r\n      var span = document.createElement(\"span\");\r\n      var template = \"\";\r\n\r\n      template +=\r\n        '<img src=\"' +\r\n        item.element.getAttribute(\"data-kt-select2-country\") +\r\n        '\" class=\"rounded-circle h-20px me-2\" alt=\"image\"/>';\r\n      template += item.text;\r\n\r\n      span.innerHTML = template;\r\n\r\n      return $(span);\r\n    };\r\n\r\n    // Init Select2 --- more info: https://select2.org/\r\n    $('[data-kt-settings-type=\"select2_flags\"]').select2({\r\n      placeholder: \"Select a country\",\r\n      minimumResultsForSearch: Infinity,\r\n      templateSelection: optionFormat,\r\n      templateResult: optionFormat,\r\n    });\r\n  };\r\n\r\n  // Init File Uploader\r\n  const initFileUploader = () => {\r\n    fileInputs = Array.from(document.querySelectorAll('input[type=\"file\"]'));\r\n\r\n    fileInputs.forEach((input) => {\r\n      let error;\r\n      const previewContainer = input.closest(\".kt-file-uploader\");\r\n      const label = previewContainer.querySelector(\".kt-file-uploader-label\");\r\n      ktFileUploaderContent = label.innerHTML;\r\n      const maxFileSize = parseInt(\r\n        input.getAttribute(\"data-kt-file-uploader-max-size\")\r\n      );\r\n\r\n      // preview image using URL.createObjectURL\r\n      input.addEventListener(\"change\", function () {\r\n        const file = input.files[0];\r\n\r\n        if (!file) {\r\n          return;\r\n        }\r\n\r\n        // create preview element and append to the container\r\n        const preview = document.createElement(\"img\");\r\n\r\n        if (error) {\r\n          error.remove();\r\n        }\r\n\r\n        if (file?.size > 1024 * 1024 * maxFileSize) {\r\n          // create error message\r\n          error = document.createElement(\"div\");\r\n          error.classList.add(\"text-danger\", \"mt-2\");\r\n          error.innerText = `File size should not exceed ${maxFileSize}MB`;\r\n\r\n          // restore label content\r\n          label.innerHTML = ktFileUploaderContent;\r\n\r\n          // empty input value\r\n          input.value = \"\";\r\n\r\n          // append error message\r\n          previewContainer.appendChild(error);\r\n          return;\r\n        }\r\n\r\n        // remove content and append preview\r\n        label.innerHTML = \"\";\r\n        preview.classList.add(\"kt-file-uploader-preview\");\r\n        preview.src = URL.createObjectURL(file);\r\n        preview.alt = file.name;\r\n        label.appendChild(preview);\r\n      });\r\n    });\r\n  };\r\n\r\n  // Public methods\r\n  return {\r\n    init: function () {\r\n      initForms();\r\n      initTagify();\r\n      initSelect2Flags();\r\n      initFileUploader();\r\n    },\r\n  };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n  KTAppThemeSettings.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/settings/theme.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/settings/theme.js"]();
/******/ 	
/******/ })()
;