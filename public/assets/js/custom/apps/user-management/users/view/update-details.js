/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/user-management/users/view/update-details.js":
/*!*********************************************************************************!*\
  !*** ../public/src/js/custom/apps/user-management/users/view/update-details.js ***!
  \*********************************************************************************/
/***/ (() => {

eval("// Class definition\r\nconst KTUsersUpdateDetails = (function () {\r\n    // Shared variables\r\n    const element = document.getElementById('kt_modal_update_details');\r\n    const form = element.querySelector('#kt_modal_update_user_form');\r\n    const modal = new bootstrap.Modal(element);\r\n    let validator;\r\n\r\n    // Init add schedule modal\r\n    const initUpdateDetails = () => {\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        validator = FormValidation.formValidation(form, {\r\n            fields: {\r\n                name: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Name is required',\r\n                        },\r\n                    },\r\n                },\r\n                email: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Email address is required',\r\n                        },\r\n                        regexp: {\r\n                            regexp: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                            message: 'The value is not a valid email address',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            plugins: {\r\n                bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                    rowSelector: '.fv-row',\r\n                    eleInvalidClass: '', // comment to enable invalid state icons\r\n                    eleValidClass: '', // comment to enable valid state icons\r\n                }),\r\n            },\r\n        });\r\n\r\n        // Close button handler\r\n        const closeButton = element.querySelector(\r\n            '[data-kt-users-modal-action=\"close\"]'\r\n        );\r\n        closeButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: 'Are you sure you would like to cancel?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: 'Yes, cancel it!',\r\n                cancelButtonText: 'No, return',\r\n                customClass: {\r\n                    confirmButton: 'btn btn-primary',\r\n                    cancelButton: 'btn btn-active-light',\r\n                },\r\n            }).then((result) => {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\r\n                    modal.hide(); // Hide modal\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: 'Your form has not been cancelled!.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Cancel button handler\r\n        const cancelButton = element.querySelector(\r\n            '[data-kt-users-modal-action=\"cancel\"]'\r\n        );\r\n        cancelButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: 'Are you sure you would like to cancel?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: 'Yes, cancel it!',\r\n                cancelButtonText: 'No, return',\r\n                customClass: {\r\n                    confirmButton: 'btn btn-primary',\r\n                    cancelButton: 'btn btn-active-light',\r\n                },\r\n            }).then((result) => {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\r\n                    modal.hide(); // Hide modal\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: 'Your form has not been cancelled!.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Submit button handler\r\n        const submitButton = element.querySelector(\r\n            '[data-kt-users-modal-action=\"submit\"]'\r\n        );\r\n        // Handle form submit\r\n        submitButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            validator.revalidateField('password');\r\n\r\n            validator.validate().then((status) => {\r\n                if (status == 'Valid') {\r\n                    // Show loading indication\r\n                    submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                    // Disable button to avoid multiple click\r\n                    submitButton.disabled = true;\r\n                    // User form data\r\n                    const userFormData = new FormData();\r\n\r\n                    // Form fields\r\n                    const formFields = [\r\n                        'name',\r\n                        'email',\r\n                        'phone',\r\n                        'dob',\r\n                        'address',\r\n                        'city',\r\n                        'state',\r\n                        'country',\r\n                        'postalCode',\r\n                    ];\r\n\r\n                    // Append form data dynamically\r\n                    formFields.forEach(\r\n                        (field) =>\r\n                            form[field].value.trim() &&\r\n                            userFormData.append(field, form[field].value.trim())\r\n                    );\r\n\r\n                    // Append avatar\r\n                    if (form.avatar.files.length > 0) {\r\n                        userFormData.append('avatar', form.avatar.files[0]);\r\n                    }\r\n\r\n                    // Check axios library docs: https://axios-http.com/docs/intro\r\n                    axios\r\n                        .patch(\r\n                            submitButton.closest('form').getAttribute('action'),\r\n                            userFormData\r\n                        )\r\n                        .then((response) => {\r\n                            Swal.fire({\r\n                                text:\r\n                                    response?.data?.message ||\r\n                                    'Form has been successfully submitted!',\r\n                                icon: 'success',\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: 'Ok, got it!',\r\n                                customClass: {\r\n                                    confirmButton: 'btn btn-primary',\r\n                                },\r\n                                allowOutsideClick: false,\r\n                            }).then((result) => {\r\n                                // Get the redirect URL from the form\r\n                                const redirectUrl = form.getAttribute(\r\n                                    'data-kt-redirect-url'\r\n                                );\r\n\r\n                                if (result.isConfirmed && redirectUrl) {\r\n                                    modal.hide();\r\n                                    location.href = redirectUrl;\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch((error) => {\r\n                            const errors = error.response?.data?.message\r\n                                ? error.response?.data?.message\r\n                                : error?.response?.data?.errors;\r\n\r\n                            Swal.fire({\r\n                                html: `${\r\n                                    errors instanceof Array\r\n                                        ? `<ul class=\"text-start\">${Object.values(\r\n                                              error.response.data.errors\r\n                                          )\r\n                                              .map(\r\n                                                  (err) =>\r\n                                                      `<li>${err?.message}</li>`\r\n                                              )\r\n                                              .join('')}</ul>`\r\n                                        : errors\r\n                                }`,\r\n                                icon: 'error',\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: 'Ok, got it!',\r\n                                customClass: {\r\n                                    confirmButton: 'btn btn-primary',\r\n                                },\r\n                            });\r\n                        })\r\n                        .then(() => {\r\n                            // Hide loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n                        });\r\n                } else {\r\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                    Swal.fire({\r\n                        text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    // Date of birth picker\r\n    const dobPicker = () => {\r\n        $('#kt_datepicker_user_dob').flatpickr({\r\n            enableTime: false,\r\n            dateFormat: 'Y-m-d',\r\n        });\r\n    };\r\n\r\n    return {\r\n        // Public functions\r\n        init() {\r\n            initUpdateDetails();\r\n            dobPicker();\r\n        },\r\n    };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(() => {\r\n    KTUsersUpdateDetails.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/user-management/users/view/update-details.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/user-management/users/view/update-details.js"]();
/******/ 	
/******/ })()
;