/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/user-management/users/view/update-login-history.js":
/*!***************************************************************************************!*\
  !*** ../public/src/js/custom/apps/user-management/users/view/update-login-history.js ***!
  \***************************************************************************************/
/***/ (() => {

eval("// Class definition\r\nconst KTUsersUpdateLoginHistory = (function () {\r\n    // Shared variables\r\n    const loginHistoryBlockBtns = document.querySelectorAll(\r\n        '[data-kt-users-login-session-table-filter=\"block\"]'\r\n    );\r\n    const loginHistorySignOutBtns = document.querySelectorAll(\r\n        '[data-kt-users-login-session-table-filter=\"sign_out\"]'\r\n    );\r\n\r\n    // Block login session\r\n    const handleLoginHistoryStatus = () => {\r\n        if (!loginHistoryBlockBtns.length) {\r\n            return;\r\n        }\r\n\r\n        loginHistoryBlockBtns.forEach((lhbb) => {\r\n            lhbb.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n\r\n                const url = lhbb.getAttribute('href');\r\n\r\n                // Show confirm popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                Swal.fire({\r\n                    text: 'Are you sure you want to block this user?',\r\n                    icon: 'warning',\r\n                    buttonsStyling: false,\r\n                    showCancelButton: true,\r\n                    cancelButtonText: 'No, cancel',\r\n                    confirmButtonText: 'Yes, disable!',\r\n                    customClass: {\r\n                        confirmButton: 'btn btn-primary',\r\n                        cancelButton: 'btn btn-light',\r\n                    },\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        axios\r\n                            .patch(url, {\r\n                                status: 'blocked',\r\n                            })\r\n                            .then((response) => {\r\n                                // Show success message. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                Swal.fire({\r\n                                    text:\r\n                                        response?.data?.message ||\r\n                                        'The login session has been successfully blocked!',\r\n                                    icon: 'success',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                    allowOutsideClick: false,\r\n                                    showCancelButton: false,\r\n                                }).then((outcome) => {\r\n                                    if (outcome.isConfirmed) {\r\n                                        location.reload();\r\n                                    }\r\n                                });\r\n                            })\r\n                            .catch((error) => {\r\n                                const errors = error.response?.data?.message\r\n                                    ? error.response?.data?.message\r\n                                    : error?.response?.data?.errors;\r\n\r\n                                Swal.fire({\r\n                                    html: `${\r\n                                        errors instanceof Array\r\n                                            ? `<ul class=\"text-start\">${Object.values(\r\n                                                  error.response.data.errors\r\n                                              )\r\n                                                  .map(\r\n                                                      (err) =>\r\n                                                          `<li>${err?.message}</li>`\r\n                                                  )\r\n                                                  .join('')}</ul>`\r\n                                            : errors\r\n                                    }`,\r\n                                    icon: 'error',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                });\r\n                            });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    // Sign out login session\r\n    const handleLoginHistorySignOut = () => {\r\n        if (!loginHistorySignOutBtns.length) {\r\n            return;\r\n        }\r\n\r\n        loginHistorySignOutBtns.forEach((lhbb) => {\r\n            lhbb.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n\r\n                const url = lhbb.getAttribute('href');\r\n\r\n                // Show confirm popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                Swal.fire({\r\n                    text: 'Are you sure you want to sign out this user?',\r\n                    icon: 'warning',\r\n                    buttonsStyling: false,\r\n                    showCancelButton: true,\r\n                    cancelButtonText: 'No, cancel',\r\n                    confirmButtonText: 'Yes, sign out!',\r\n                    customClass: {\r\n                        confirmButton: 'btn btn-primary',\r\n                        cancelButton: 'btn btn-light',\r\n                    },\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        axios\r\n                            .delete(url)\r\n                            .then((response) => {\r\n                                // Show success message. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                Swal.fire({\r\n                                    text:\r\n                                        response?.data?.message ||\r\n                                        'The login session has been successfully signed out!',\r\n                                    icon: 'success',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                    allowOutsideClick: false,\r\n                                    showCancelButton: false,\r\n                                }).then((outcome) => {\r\n                                    if (outcome.isConfirmed) {\r\n                                        location.reload();\r\n                                    }\r\n                                });\r\n                            })\r\n                            .catch((error) => {\r\n                                const errors = error.response?.data?.message\r\n                                    ? error.response?.data?.message\r\n                                    : error?.response?.data?.errors;\r\n\r\n                                Swal.fire({\r\n                                    html: `${\r\n                                        errors instanceof Array\r\n                                            ? `<ul class=\"text-start\">${Object.values(\r\n                                                  error.response.data.errors\r\n                                              )\r\n                                                  .map(\r\n                                                      (err) =>\r\n                                                          `<li>${err?.message}</li>`\r\n                                                  )\r\n                                                  .join('')}</ul>`\r\n                                            : errors\r\n                                    }`,\r\n                                    icon: 'error',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                });\r\n                            });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    return {\r\n        // Public functions\r\n        init() {\r\n            handleLoginHistoryStatus();\r\n            handleLoginHistorySignOut();\r\n        },\r\n    };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(() => {\r\n    KTUsersUpdateLoginHistory.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/user-management/users/view/update-login-history.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/user-management/users/view/update-login-history.js"]();
/******/ 	
/******/ })()
;