/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/user-management/users/view/update-role.js":
/*!******************************************************************************!*\
  !*** ../public/src/js/custom/apps/user-management/users/view/update-role.js ***!
  \******************************************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTUsersUpdateRole = (function () {\n    // Shared variables\n    const element = document.getElementById('kt_modal_update_role');\n    const form = element.querySelector('#kt_modal_update_role_form');\n    const modal = new bootstrap.Modal(element);\n\n    // Init add schedule modal\n    var initUpdateRole = () => {\n        // Close button handler\n        const closeButton = element.querySelector(\n            '[data-kt-users-modal-action=\"close\"]'\n        );\n        closeButton.addEventListener('click', (e) => {\n            e.preventDefault();\n\n            Swal.fire({\n                text: 'Are you sure you would like to cancel?',\n                icon: 'warning',\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: 'Yes, cancel it!',\n                cancelButtonText: 'No, return',\n                customClass: {\n                    confirmButton: 'btn btn-primary',\n                    cancelButton: 'btn btn-active-light',\n                },\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\n                    modal.hide(); // Hide modal\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: 'Your form has not been cancelled!.',\n                        icon: 'error',\n                        buttonsStyling: false,\n                        confirmButtonText: 'Ok, got it!',\n                        customClass: {\n                            confirmButton: 'btn btn-primary',\n                        },\n                    });\n                }\n            });\n        });\n\n        // Cancel button handler\n        const cancelButton = element.querySelector(\n            '[data-kt-users-modal-action=\"cancel\"]'\n        );\n        cancelButton.addEventListener('click', (e) => {\n            e.preventDefault();\n\n            Swal.fire({\n                text: 'Are you sure you would like to cancel?',\n                icon: 'warning',\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: 'Yes, cancel it!',\n                cancelButtonText: 'No, return',\n                customClass: {\n                    confirmButton: 'btn btn-primary',\n                    cancelButton: 'btn btn-active-light',\n                },\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\n                    modal.hide(); // Hide modal\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: 'Your form has not been cancelled!.',\n                        icon: 'error',\n                        buttonsStyling: false,\n                        confirmButtonText: 'Ok, got it!',\n                        customClass: {\n                            confirmButton: 'btn btn-primary',\n                        },\n                    });\n                }\n            });\n        });\n\n        // Submit button handler\n        const submitButton = element.querySelector(\n            '[data-kt-users-modal-action=\"submit\"]'\n        );\n        submitButton.addEventListener('click', function (e) {\n            // Prevent default button action\n            e.preventDefault();\n\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on');\n\n            // Disable button to avoid multiple click\n            submitButton.disabled = true;\n\n            // Check axios library docs: https://axios-http.com/docs/intro\n            axios\n                .patch(\n                    submitButton.closest('form').getAttribute('action'),\n                    new FormData(form)\n                )\n                .then((response) => {\n                    // hide modal\n                    modal.hide();\n\n                    if (response) {\n                        // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                        Swal.fire({\n                            text:\n                                response?.data?.message ||\n                                'Role has been updated successfully.',\n                            icon: 'success',\n                            buttonsStyling: false,\n                            confirmButtonText: 'Ok, got it!',\n                            customClass: {\n                                confirmButton: 'btn btn-primary',\n                            },\n                            allowOutsideClick: false,\n                        }).then((result) => {\n                            // Reset form\n                            form.reset();\n\n                            // Get redirect URL from the form\n                            const redirectUrl = form.getAttribute(\n                                'data-kt-redirect-url'\n                            );\n\n                            if (result.isConfirmed && redirectUrl) {\n                                // Hide modal\n                                modal.hide();\n\n                                // Redirect the user\n                                location.href = redirectUrl;\n                            }\n                        });\n                    } else {\n                        // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                        Swal.fire({\n                            text: 'Sorry, looks like there are some errors detected, please try again.',\n                            icon: 'error',\n                            buttonsStyling: false,\n                            confirmButtonText: 'Ok, got it!',\n                            customClass: {\n                                confirmButton: 'btn btn-primary',\n                            },\n                        });\n                    }\n                })\n                .catch((error) => {\n                    const errors = error.response?.data?.message\n                        ? error.response?.data?.message\n                        : error?.response?.data?.errors;\n\n                    Swal.fire({\n                        html: `${\n                            errors instanceof Array\n                                ? `<ul class=\"text-start\">${Object.values(\n                                      error.response.data.errors\n                                  )\n                                      .map((err) => `<li>${err?.message}</li>`)\n                                      .join('')}</ul>`\n                                : errors\n                        }`,\n                        icon: 'error',\n                        buttonsStyling: false,\n                        confirmButtonText: 'Ok, got it!',\n                        customClass: {\n                            confirmButton: 'btn btn-primary',\n                        },\n                    });\n                })\n                .then(() => {\n                    // Hide loading indication\n                    submitButton.removeAttribute('data-kt-indicator');\n\n                    // Enable button\n                    submitButton.disabled = false;\n                });\n        });\n    };\n\n    return {\n        // Public functions\n        init: function () {\n            initUpdateRole();\n        },\n    };\n})();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTUsersUpdateRole.init();\n});\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/user-management/users/view/update-role.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/user-management/users/view/update-role.js"]();
/******/ 	
/******/ })()
;