/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/user-management/users/view/update-role.js":
/*!******************************************************************************!*\
  !*** ../public/src/js/custom/apps/user-management/users/view/update-role.js ***!
  \******************************************************************************/
/***/ (() => {

eval("\r\n\r\n// Class definition\r\nvar KTUsersUpdateRole = (function () {\r\n    // Shared variables\r\n    const element = document.getElementById('kt_modal_update_role');\r\n    const form = element.querySelector('#kt_modal_update_role_form');\r\n    const modal = new bootstrap.Modal(element);\r\n\r\n    // Init add schedule modal\r\n    var initUpdateRole = () => {\r\n        // Close button handler\r\n        const closeButton = element.querySelector(\r\n            '[data-kt-users-modal-action=\"close\"]'\r\n        );\r\n        closeButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: 'Are you sure you would like to cancel?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: 'Yes, cancel it!',\r\n                cancelButtonText: 'No, return',\r\n                customClass: {\r\n                    confirmButton: 'btn btn-primary',\r\n                    cancelButton: 'btn btn-active-light',\r\n                },\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\r\n                    modal.hide(); // Hide modal\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: 'Your form has not been cancelled!.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Cancel button handler\r\n        const cancelButton = element.querySelector(\r\n            '[data-kt-users-modal-action=\"cancel\"]'\r\n        );\r\n        cancelButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: 'Are you sure you would like to cancel?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: 'Yes, cancel it!',\r\n                cancelButtonText: 'No, return',\r\n                customClass: {\r\n                    confirmButton: 'btn btn-primary',\r\n                    cancelButton: 'btn btn-active-light',\r\n                },\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\r\n                    modal.hide(); // Hide modal\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: 'Your form has not been cancelled!.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Submit button handler\r\n        const submitButton = element.querySelector(\r\n            '[data-kt-users-modal-action=\"submit\"]'\r\n        );\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Show loading indication\r\n            submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n            // Disable button to avoid multiple click\r\n            submitButton.disabled = true;\r\n\r\n            // Check axios library docs: https://axios-http.com/docs/intro\r\n            axios\r\n                .patch(\r\n                    submitButton.closest('form').getAttribute('action'),\r\n                    new FormData(form)\r\n                )\r\n                .then((response) => {\r\n                    // hide modal\r\n                    modal.hide();\r\n\r\n                    if (response) {\r\n                        // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        Swal.fire({\r\n                            text:\r\n                                response?.data?.message ||\r\n                                'Role has been updated successfully.',\r\n                            icon: 'success',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn btn-primary',\r\n                            },\r\n                            allowOutsideClick: false,\r\n                        }).then((result) => {\r\n                            // Reset form\r\n                            form.reset();\r\n\r\n                            // Get redirect URL from the form\r\n                            const redirectUrl = form.getAttribute(\r\n                                'data-kt-redirect-url'\r\n                            );\r\n\r\n                            if (result.isConfirmed && redirectUrl) {\r\n                                // Hide modal\r\n                                modal.hide();\r\n\r\n                                // Redirect the user\r\n                                location.href = redirectUrl;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        Swal.fire({\r\n                            text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                            icon: 'error',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn btn-primary',\r\n                            },\r\n                        });\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    const errors = error.response?.data?.message\r\n                        ? error.response?.data?.message\r\n                        : error?.response?.data?.errors;\r\n\r\n                    Swal.fire({\r\n                        html: `${\r\n                            errors instanceof Array\r\n                                ? `<ul class=\"text-start\">${Object.values(\r\n                                      error.response.data.errors\r\n                                  )\r\n                                      .map((err) => `<li>${err?.message}</li>`)\r\n                                      .join('')}</ul>`\r\n                                : errors\r\n                        }`,\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                })\r\n                .then(() => {\r\n                    // Hide loading indication\r\n                    submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                    // Enable button\r\n                    submitButton.disabled = false;\r\n                });\r\n        });\r\n    };\r\n\r\n    return {\r\n        // Public functions\r\n        init: function () {\r\n            initUpdateRole();\r\n        },\r\n    };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTUsersUpdateRole.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/user-management/users/view/update-role.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/user-management/users/view/update-role.js"]();
/******/ 	
/******/ })()
;