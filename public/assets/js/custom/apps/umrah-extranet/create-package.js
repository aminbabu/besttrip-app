/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/umrah-extranet/create-package.js":
/*!*********************************************************************!*\
  !*** ../public/src/js/custom/apps/umrah-extranet/create-package.js ***!
  \*********************************************************************/
/***/ (() => {

eval("\r\n\r\n// Class definition\r\nvar KTCreatePackage = (function () {\r\n    // Elements\r\n    var stepper;\r\n    var form;\r\n    var formSubmitButton;\r\n    var formContinueButton;\r\n\r\n    // Variables\r\n    var stepperObj;\r\n    var validations = [];\r\n    var ktFileUploaderContent;\r\n\r\n    // Private Functions\r\n    var initStepper = function () {\r\n        // Initialize Stepper\r\n        stepperObj = new KTStepper(stepper);\r\n\r\n        // Stepper change event\r\n        stepperObj.on('kt.stepper.changed', function (stepper) {\r\n            if (stepperObj.getCurrentStepIndex() === 11) {\r\n                formSubmitButton.classList.remove('d-none');\r\n                formSubmitButton.classList.add('d-inline-block');\r\n                formContinueButton.classList.add('d-none');\r\n            } else if (stepperObj.getCurrentStepIndex() === 12) {\r\n                formSubmitButton.classList.add('d-none');\r\n                formContinueButton.classList.add('d-none');\r\n            } else {\r\n                formSubmitButton.classList.remove('d-inline-block');\r\n                formSubmitButton.classList.remove('d-none');\r\n                formContinueButton.classList.remove('d-none');\r\n            }\r\n        });\r\n\r\n        // Validation before going to next page\r\n        stepperObj.on('kt.stepper.next', function (stepper) {\r\n            console.log('stepper.next');\r\n\r\n            // Validate form before change stepper step\r\n            var validator = validations[stepper.getCurrentStepIndex() - 1]; // get validator for currnt step\r\n\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    if (status == 'Valid') {\r\n                        stepper.goNext();\r\n\r\n                        KTUtil.scrollTop();\r\n                    } else {\r\n                        Swal.fire({\r\n                            text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                            icon: 'error',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn btn-light',\r\n                            },\r\n                        }).then(function () {\r\n                            KTUtil.scrollTop();\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                stepper.goNext();\r\n\r\n                KTUtil.scrollTop();\r\n            }\r\n        });\r\n\r\n        // Prev event\r\n        stepperObj.on('kt.stepper.previous', function (stepper) {\r\n            console.log('stepper.previous');\r\n\r\n            stepper.goPrevious();\r\n            KTUtil.scrollTop();\r\n        });\r\n    };\r\n\r\n    var handleForm = function () {\r\n        formSubmitButton.addEventListener('click', function (e) {\r\n            // Validate form before change stepper step\r\n            var validator = validations[3]; // get validator for last form\r\n\r\n            validator.validate().then(function (status) {\r\n                if (status == 'Valid') {\r\n                    // Prevent default button action\r\n                    e.preventDefault();\r\n\r\n                    // Disable button to avoid multiple click\r\n                    formSubmitButton.disabled = true;\r\n\r\n                    // Show loading indication\r\n                    formSubmitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                    // Simulate form submission\r\n                    setTimeout(function () {\r\n                        // Hide loading indication\r\n                        formSubmitButton.removeAttribute('data-kt-indicator');\r\n\r\n                        // Enable button\r\n                        formSubmitButton.disabled = false;\r\n\r\n                        // Show popup confirmation\r\n                        Swal.fire({\r\n                            text: 'Form has been successfully submitted!',\r\n                            icon: 'success',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn btn-primary',\r\n                            },\r\n                        }).then(function (result) {\r\n                            // stepperObj.goNext();\r\n                        });\r\n                    }, 2000);\r\n                } else {\r\n                    Swal.fire({\r\n                        text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-light',\r\n                        },\r\n                    }).then(function () {\r\n                        KTUtil.scrollTop();\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Expiry month. For more info, plase visit the official plugin site: https://select2.org/\r\n        $(form.querySelector('[name=\"card_expiry_month\"]')).on(\r\n            'change',\r\n            function () {\r\n                // Revalidate the field when an option is chosen\r\n                validations[3].revalidateField('card_expiry_month');\r\n            }\r\n        );\r\n\r\n        // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\r\n        $(form.querySelector('[name=\"card_expiry_year\"]')).on(\r\n            'change',\r\n            function () {\r\n                // Revalidate the field when an option is chosen\r\n                validations[3].revalidateField('card_expiry_year');\r\n            }\r\n        );\r\n\r\n        // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\r\n        $(form.querySelector('[name=\"business_type\"]')).on(\r\n            'change',\r\n            function () {\r\n                // Revalidate the field when an option is chosen\r\n                validations[2].revalidateField('business_type');\r\n            }\r\n        );\r\n    };\r\n\r\n    var initValidation = function () {\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        // Step 1\r\n        validations.push(\r\n            FormValidation.formValidation(form, {\r\n                fields: {\r\n                    basic_package_thumbnail: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Thumbnail is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    basic_package_title: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Package title is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    basic_package_subtitle: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Package subtitle is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    basic_package_start_location: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Departure location is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    basic_package_start_date: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Package start date is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    basic_package_expire_date: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Package start date is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    basic_package_schedule: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Package schedule is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    'basic_package_duration_days_&_nights': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Total days and is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    basic_package_type: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Package type is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    basic_package_status: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Package status is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    basic_adult_package_price: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Adult package price is required',\r\n                            },\r\n                            integer: {\r\n                                message: 'The value must be a number',\r\n                            },\r\n                            greaterThan: {\r\n                                min: 0,\r\n                                inclusive: false,\r\n                                message:\r\n                                    'Adult package price must be a positive number',\r\n                            },\r\n                        },\r\n                    },\r\n                    basic_child_package_price: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Child package price is required',\r\n                            },\r\n                            integer: {\r\n                                message: 'The value must be a number',\r\n                            },\r\n                            greaterThan: {\r\n                                min: 0,\r\n                                inclusive: false,\r\n                                message:\r\n                                    'Child package price must be a positive number',\r\n                            },\r\n                        },\r\n                    },\r\n                    basic_infant_package_price: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Infant package price is required',\r\n                            },\r\n                            integer: {\r\n                                message: 'The value must be a number',\r\n                            },\r\n                            greaterThan: {\r\n                                min: 0,\r\n                                inclusive: false,\r\n                                message:\r\n                                    'Infant package price must be a positive number',\r\n                            },\r\n                        },\r\n                    },\r\n                    basic_seat_available: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Seat available is required',\r\n                            },\r\n                            integer: {\r\n                                message: 'The value must be a number',\r\n                            },\r\n                            greaterThan: {\r\n                                min: 0,\r\n                                inclusive: false,\r\n                                message:\r\n                                    'Seat available must be a positive number',\r\n                            },\r\n                        },\r\n                    },\r\n                    'basic_inclusions[]': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Inclusions is required',\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: '',\r\n                    }),\r\n                },\r\n            })\r\n        );\r\n\r\n        // Step 2\r\n        validations.push(\r\n            FormValidation.formValidation(form, {\r\n                fields: {\r\n                    outbound_airline_code: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Airline code is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_flight_no: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Flight number is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_booking_class: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Flight class is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_aircraft_model: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Airline model is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_departure_airport: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Departure from is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_arrival_airport: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Arrival to is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_departure_datetime: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Departure datetime is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_arrival_datetime: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Arrival datetime is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_flight_stops: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Flight stops is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_adult_baggage_checkin: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Adult baggage check-in is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_adult_baggage_cabin: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Adult baggage cabin is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_child_baggage_checkin: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Child baggage check-in is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_child_baggage_cabin: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Child baggage cabin is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_infant_baggage_checkin: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Infant baggage check-in is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    outbound_infant_baggage_cabin: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Infant baggage cabin is required',\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    // Bootstrap Framework Integration\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: '',\r\n                    }),\r\n                },\r\n            })\r\n        );\r\n\r\n        // Step 3\r\n        validations.push(\r\n            FormValidation.formValidation(form, {\r\n                fields: {\r\n                    makkah_hotel_thumbnail: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Thumbnail is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    makkah_hotel_stay_duration: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Stay duration is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    makkah_hotel_name: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Hotel name is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    makkah_hotel_address: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Address is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    makkah_hotel_rating: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Rating is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    makkah_hotel_distance_from_haram: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Distance from Haram is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    makkah_hotel_distance_from_haram_unit: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Distance unit is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    makkah_hotel_walking_distance_from_haram: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message:\r\n                                    'Walking distance from Haram is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    makkah_hotel_google_map_link: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Google map link is required',\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    // Bootstrap Framework Integration\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: '',\r\n                    }),\r\n                },\r\n            })\r\n        );\r\n\r\n        // Step 4\r\n        validations.push(\r\n            FormValidation.formValidation(form, {\r\n                fields: {\r\n                    madinah_hotel_thumbnail: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Thumbnail is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    madinah_hotel_stay_duration: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Stay duration is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    madinah_hotel_name: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Hotel name is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    madinah_hotel_address: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Address is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    madinah_hotel_rating: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Rating is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    madinah_hotel_distance_from_masjid_e_nabwi: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message:\r\n                                    'Distance from Masjid-e-Nabwi is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    madinah_hotel_distance_from_masjid_e_nabwi_unit: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Distance unit is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    madinah_hotel_walking_distance_from_masjid_e_nabwi: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message:\r\n                                    'Walking distance from Masjid-e-Nabwi is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    madinah_hotel_google_map_link: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Google map link is required',\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    // Bootstrap Framework Integration\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: '',\r\n                    }),\r\n                },\r\n            })\r\n        );\r\n\r\n        // Step 5\r\n        validations.push(\r\n            FormValidation.formValidation(form, {\r\n                fields: {\r\n                    inbound_airline_code: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Airline code is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_flight_no: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Flight number is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_flight_class: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Flight class is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_airline_model: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Airline model is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_departure_airport: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Departure from is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_arrival_airport: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Arrival to is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_departure_datetime: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Departure datetime is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_arrival_datetime: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Arrival datetime is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_flight_stops: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Flight stops is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_adult_baggage_checkin: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Adult baggage check-in is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_adult_baggage_cabin: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Adult baggage cabin is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_child_baggage_checkin: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Child baggage check-in is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_child_baggage_cabin: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Child baggage cabin is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_infant_baggage_checkin: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Infant baggage check-in is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    inbound_infant_baggage_cabin: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Infant baggage cabin is required',\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    // Bootstrap Framework Integration\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: '',\r\n                    }),\r\n                },\r\n            })\r\n        );\r\n\r\n        // Step 6\r\n        validations.push(\r\n            FormValidation.formValidation(form, {\r\n                fields: {\r\n                    visa_type: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Visa type is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    visa_entries: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Visa entries is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    visa_duration: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Visa duration is required',\r\n                            },\r\n                            positive: {\r\n                                message:\r\n                                    'Visa validity must be a positive number',\r\n                            },\r\n                            greaterThan: {\r\n                                min: 0,\r\n                                inclusive: false,\r\n                                message:\r\n                                    'Visa validity must be a positive number',\r\n                            },\r\n                        },\r\n                    },\r\n                    visa_validity: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Visa validity is required',\r\n                            },\r\n                            positive: {\r\n                                message:\r\n                                    'Visa validity must be a positive number',\r\n                            },\r\n                            greaterThan: {\r\n                                min: 0,\r\n                                inclusive: false,\r\n                                message:\r\n                                    'Visa validity must be a positive number',\r\n                            },\r\n                        },\r\n                    },\r\n                    'visa_required[]': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Value is required',\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    // Bootstrap Framework Integration\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: '',\r\n                    }),\r\n                },\r\n            })\r\n        );\r\n\r\n        // Step 7\r\n        validations.push(\r\n            FormValidation.formValidation(form, {\r\n                fields: {\r\n                    transport_type: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Transport type is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    transport_airport_to_hotel: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Airport to hotel is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    transport_visitor_place: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Visitor place is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    transport_hotel_to_airport: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Hotel to airport is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    'transport_bus_service[]': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Value is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    'transport_bus_service_type[]': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Bus service type is required',\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    // Bootstrap Framework Integration\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: '',\r\n                    }),\r\n                },\r\n            })\r\n        );\r\n\r\n        // Step 8\r\n        validations.push(\r\n            FormValidation.formValidation(form, {\r\n                fields: {\r\n                    ziyara_days: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The value is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    ziyara_makkah: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The value is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    ziyara_madinah: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The value is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    ziyara_taif: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The value is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    'ziyara_makkah_details[]': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Makkah ziyara details is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    'ziyara_madinah_details[]': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Madinah ziyara details is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    'ziyara_taif_details[]': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Taif ziyara details is required',\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    // Bootstrap Framework Integration\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: '',\r\n                    }),\r\n                },\r\n            })\r\n        );\r\n\r\n        // Step 9\r\n        validations.push(\r\n            FormValidation.formValidation(form, {\r\n                fields: {},\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    // Bootstrap Framework Integration\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: '',\r\n                    }),\r\n                },\r\n            })\r\n        );\r\n\r\n        // Step 10\r\n        validations.push(\r\n            FormValidation.formValidation(form, {\r\n                fields: {\r\n                    about_umrah_thumbnail: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Thumbnail is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    about_umrah_title: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Title is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    about_umrah_short_description: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Short description is required',\r\n                            },\r\n                        },\r\n                    },\r\n                    about_umrah_description: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Description is required',\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    // Bootstrap Framework Integration\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: '',\r\n                    }),\r\n                },\r\n            })\r\n        );\r\n\r\n        // Step 11\r\n        validations.push(\r\n            FormValidation.formValidation(form, {\r\n                fields: {\r\n                    terms_conditions_description: {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Description is required',\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    // Bootstrap Framework Integration\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: '',\r\n                    }),\r\n                },\r\n            })\r\n        );\r\n    };\r\n\r\n    // Init File Uploader\r\n    const initFileUploader = () => {\r\n        const handleFileInputChange = (input) => {\r\n            const previewContainer = input.closest('.kt-file-uploader');\r\n            const label = previewContainer.querySelector(\r\n                '.kt-file-uploader-label'\r\n            );\r\n            const maxFileSize = parseInt(\r\n                input.getAttribute('data-kt-file-uploader-max-size')\r\n            );\r\n            const invalidMessage =\r\n                previewContainer.querySelector('.invalid-feedback');\r\n            const file = input.files[0];\r\n\r\n            if (!file) {\r\n                return;\r\n            }\r\n\r\n            // remove error message\r\n            invalidMessage.classList.add('d-none');\r\n\r\n            // create preview element and append to the container\r\n            const preview = document.createElement('img');\r\n\r\n            if (file?.size > 1024 * 1024 * maxFileSize) {\r\n                const message = `File size should not exceed ${maxFileSize}MB`;\r\n\r\n                if (ktFileUploaderContent) {\r\n                    // restore label content\r\n                    label.innerHTML = ktFileUploaderContent;\r\n                }\r\n\r\n                // empty input value\r\n                input.value = '';\r\n\r\n                // append error message\r\n                invalidMessage.innerHTML = message;\r\n                invalidMessage.classList.remove('d-none');\r\n                return;\r\n            }\r\n\r\n            // add was-invalid class to the container\r\n            if (!previewContainer.classList.contains('was-invalided')) {\r\n                ktFileUploaderContent = label.innerHTML;\r\n                previewContainer.classList.add('was-invalided');\r\n            }\r\n\r\n            // remove content and append preview\r\n            label.innerHTML = '';\r\n            preview.classList.add('kt-file-uploader-preview');\r\n            preview.src = URL.createObjectURL(file);\r\n            preview.alt = file.name;\r\n            label.appendChild(preview);\r\n        };\r\n\r\n        form.addEventListener('change', function (event) {\r\n            const target = event.target;\r\n\r\n            // Check if the changed element is an input with type file\r\n            if (target.tagName === 'INPUT' && target.type === 'file') {\r\n                handleFileInputChange(target);\r\n            }\r\n        });\r\n    };\r\n\r\n    // Add more thumbnails\r\n    const addMoreThumbnails = () => {\r\n        const dropZoneBasicThumbnails = new Dropzone(\r\n            '#kt_dropzonejs_basic_thumbnails',\r\n            {\r\n                url: 'https://keenthemes.com/scripts/void.php', // Set the url for your upload script location\r\n                paramName: 'file', // The name that will be used to transfer the file\r\n                maxFiles: 10,\r\n                maxFilesize: 10, // MB\r\n                addRemoveLinks: true,\r\n                accept: function (file, done) {\r\n                    if (file.name == 'wow.jpg') {\r\n                        done(\"Naha, you don't.\");\r\n                    } else {\r\n                        done();\r\n                    }\r\n                },\r\n            }\r\n        );\r\n        const dropZoneMakkahThumbnails = new Dropzone(\r\n            '#kt_dropzonejs_makkah_hotel_thumbnails',\r\n            {\r\n                url: 'https://keenthemes.com/scripts/void.php', // Set the url for your upload script location\r\n                paramName: 'file', // The name that will be used to transfer the file\r\n                maxFiles: 10,\r\n                maxFilesize: 10, // MB\r\n                addRemoveLinks: true,\r\n                accept: function (file, done) {\r\n                    if (file.name == 'wow.jpg') {\r\n                        done(\"Naha, you don't.\");\r\n                    } else {\r\n                        done();\r\n                    }\r\n                },\r\n            }\r\n        );\r\n        const dropZoneMadinahThumbnails = new Dropzone(\r\n            '#kt_dropzonejs_madinah_hotel_thumbnails',\r\n            {\r\n                url: 'https://keenthemes.com/scripts/void.php', // Set the url for your upload script location\r\n                paramName: 'file', // The name that will be used to transfer the file\r\n                maxFiles: 10,\r\n                maxFilesize: 10, // MB\r\n                addRemoveLinks: true,\r\n                accept: function (file, done) {\r\n                    if (file.name == 'wow.jpg') {\r\n                        done(\"Naha, you don't.\");\r\n                    } else {\r\n                        done();\r\n                    }\r\n                },\r\n            }\r\n        );\r\n    };\r\n\r\n    // Init flatpickr\r\n    var initFlatPickr = function () {\r\n        const datepicker = form.querySelectorAll(\r\n            '[data-flatpickr=package_date_picker]'\r\n        );\r\n        const datetimepicker = form.querySelectorAll(\r\n            '[data-flatpickr=package_datetime_picker]'\r\n        );\r\n        const timepicker = form.querySelectorAll(\r\n            '[data-flatpickr=package_time_picker]'\r\n        );\r\n\r\n        // Handle datepicker -- For more info on flatpickr plugin, please visit: https://flatpickr.js.org/\r\n        $(datepicker).flatpickr({\r\n            altInput: true,\r\n            altFormat: 'j F, Y',\r\n            minDate: 'today',\r\n            maxDate: new Date().fp_incr(365), // 365 days from now\r\n        });\r\n\r\n        // Handle datetimepicker -- For more info on flatpickr plugin, please visit: https://flatpickr.js.org/\r\n        $(datetimepicker).flatpickr({\r\n            enableTime: true,\r\n            altInput: true,\r\n            time_24hr: true,\r\n            minuteIncrement: 1,\r\n            altFormat: 'j F, Y H:i',\r\n            minDate: 'today',\r\n            maxDate: new Date().fp_incr(365), // 365 days from now\r\n        });\r\n\r\n        // Handle timepicker -- For more info on flatpickr plugin, please visit: https://flatpickr.js.org/\r\n        $(timepicker).flatpickr({\r\n            enableTime: true,\r\n            noCalendar: true,\r\n            dateFormat: 'H:i',\r\n            time_24hr: true,\r\n            minuteIncrement: 1,\r\n        });\r\n    };\r\n\r\n    // Flight stops handler\r\n    const handleFlightStops = () => {\r\n        const select = $('[data-kt-umrah-extranet-flight-stops-select=\"true\"]');\r\n        let stepper;\r\n        let firstTimepicker;\r\n        let secondTimepicker;\r\n        let firstAirportInput;\r\n        let secondAirportInput;\r\n\r\n        $(select).on('change', function (e) {\r\n            const value = e.target.value;\r\n            stepper = $(this).closest('[data-kt-stepper-element=\"content\"]');\r\n            firstTimepicker = $(stepper).find('[data-flatpickr-time=\"1st\"]');\r\n            secondTimepicker = $(stepper).find('[data-flatpickr-time=\"2nd\"]');\r\n            firstAirportInput = $(stepper).find('[data-layover-airport=\"1st\"]');\r\n            secondAirportInput = $(stepper).find(\r\n                '[data-layover-airport=\"2nd\"]'\r\n            );\r\n\r\n            switch (value) {\r\n                case 'one-stop': {\r\n                    showFirstTimePicker();\r\n                    showFirstAirportInput();\r\n                    hideSecondTimePicker();\r\n                    hideSecondAirportInput();\r\n                    break;\r\n                }\r\n                case 'two-stop': {\r\n                    showFirstTimePicker();\r\n                    showFirstAirportInput();\r\n                    showSecondTimePicker();\r\n                    showSecondAirportInput();\r\n                    break;\r\n                }\r\n                case 'non-stop': {\r\n                    hideFirstTimePicker();\r\n                    hideFirstAirportInput();\r\n                    hideSecondTimePicker();\r\n                    hideSecondAirportInput();\r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        // Handle timepicker\r\n        const showFirstTimePicker = () => {\r\n            $(firstTimepicker).parent().parent().removeClass('d-none');\r\n        };\r\n\r\n        const hideFirstTimePicker = () => {\r\n            $(firstTimepicker).parent().parent().addClass('d-none');\r\n        };\r\n\r\n        const showSecondTimePicker = () => {\r\n            $(secondTimepicker).parent().parent().removeClass('d-none');\r\n        };\r\n\r\n        const hideSecondTimePicker = () => {\r\n            $(secondTimepicker).parent().parent().addClass('d-none');\r\n        };\r\n\r\n        // Handle airport inputs\r\n        const showFirstAirportInput = () => {\r\n            $(firstAirportInput).parent().parent().removeClass('d-none');\r\n        };\r\n\r\n        const hideFirstAirportInput = () => {\r\n            $(firstAirportInput).parent().parent().addClass('d-none');\r\n        };\r\n\r\n        const showSecondAirportInput = () => {\r\n            $(secondAirportInput).parent().parent().removeClass('d-none');\r\n        };\r\n\r\n        const hideSecondAirportInput = () => {\r\n            $(secondAirportInput).parent().parent().addClass('d-none');\r\n        };\r\n    };\r\n\r\n    // Repeater handler\r\n    const handleRepeater = () => {\r\n        $(\r\n            '#kt_repeater_visa_required, #kt_repeater_transport_service, #kt_repeater_day_wise_itinearies, #kt_repeater_ziyara_makkah_details, #kt_repeater_ziyara_madinah_details, #kt_repeater_ziyara_taif_details'\r\n        ).repeater({\r\n            initEmpty: false,\r\n\r\n            show: function () {\r\n                $(this).slideDown();\r\n            },\r\n\r\n            hide: function (deleteElement) {\r\n                $(this).slideUp(deleteElement);\r\n            },\r\n\r\n            isFirstItemUndeletable: true,\r\n        });\r\n    };\r\n\r\n    // CKEditors\r\n    const initCKEditors = () => {\r\n        const textareas = [\r\n            'kt_docs_ckeditor_about_us_description',\r\n            'kt_docs_ckeditor_terms_&_conditions_description',\r\n        ];\r\n\r\n        textareas.forEach((id) => {\r\n            ClassicEditor.create(document.getElementById(id))\r\n                .then((editor) => {\r\n                    console.log(editor);\r\n                })\r\n                .catch((error) => {\r\n                    console.error(error);\r\n                });\r\n        });\r\n    };\r\n\r\n    // Day wise itinearies\r\n    const handleDayWiseItinearies = () => {\r\n        const addDayWiseItineary = (days) => {\r\n            let html = '';\r\n\r\n            for (let i = 0; i < days; i++) {\r\n                html += `\r\n        <div class=\"row border-bottom\">\r\n        <div class=\"col-lg-12\">\r\n          <h3 class=\"fs-4 mb-4 pb-4 border-bottom\">\r\n            Day ${i + 1 > 9 ? i + 1 : '0' + (i + 1)}\r\n          </h3>\r\n        </div>\r\n        <div class=\"col-lg-12\">\r\n          <!--begin::Input group-->\r\n          <div class=\"fv-row mb-10\">\r\n            <!--begin::Label-->\r\n            <label class=\"form-label\">Thumbnail</label>\r\n            <!--end::Label-->\r\n            <!--begin::Input group-->\r\n            <div class=\"fv-row\">\r\n              <!--begin::Preview Container-->\r\n              <div class=\"kt-file-uploader\">\r\n                <!--begin::Message-->\r\n                <label\r\n                  class=\"kt-file-uploader-label d-flex flex-column flex-xl-row align-items-center align-items-xl-start text-center text-xl-start\"\r\n                  for=\"day_wise_itineary_thumbnail_${i + 1}\"\r\n                >\r\n                  <i\r\n                    class=\"ki-duotone ki-file-up fs-3x text-primary\"\r\n                    ><span class=\"path1\"></span\r\n                    ><span class=\"path2\"></span>\r\n                  </i>\r\n                  <!--begin::Info-->\r\n                  <div class=\"ms-xl-4 mt-4 mt-xl-0\">\r\n                    <h3\r\n                      class=\"fs-5 fw-bold text-gray-900 mb-1\"\r\n                    >\r\n                      Upload thumbnail\r\n                    </h3>\r\n                    <span\r\n                      class=\"fs-7 fw-semibold text-gray-500\"\r\n                    >\r\n                      PNG, JPG, JPEG up to 10MB\r\n                    </span>\r\n                  </div>\r\n                  <!--end::Info-->\r\n                </label>\r\n                <!--end::Message-->\r\n                <!--begin::Input-->\r\n                <input\r\n                  type=\"file\"\r\n                  name=\"day_wise_itineary_thumbnail_1\"\r\n                  id=\"day_wise_itineary_thumbnail_${i + 1}\"\r\n                  accept=\".png, .jpg, .jpeg\"\r\n                  data-kt-file-uploader-max-size=\"10\"\r\n                  hidden\r\n                  class=\"d-none\"\r\n                />\r\n                <!--end::Input-->\r\n                <!--begin::Error Message -->\r\n                <div\r\n                  class=\"invalid-feedback d-block\"\r\n                ></div>\r\n                <!--end::Error Message-->\r\n              </div>\r\n              <!--end::Preview Container-->\r\n            </div>\r\n            <!--end::Input group-->\r\n          </div>\r\n          <!--end::Input group-->\r\n        </div>\r\n        <div class=\"col-lg-12\">\r\n          <!--begin::Input group-->\r\n          <div class=\"fv-row mb-10\">\r\n            <!--begin::Label-->\r\n            <label class=\"form-label\">Title</label>\r\n            <!--end::Label-->\r\n            <!--begin::Input-->\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control form-control-solid\"\r\n              name=\"day_wise_itineary_title_${i + 1}\"\r\n              placeholder=\"\"\r\n              value=\"\"\r\n            />\r\n            <!--end::Input-->\r\n          </div>\r\n          <!--end::Input group-->\r\n        </div>\r\n        <div class=\"col-lg-12\">\r\n          <!--begin::Input group-->\r\n          <div class=\"fv-row mb-10\">\r\n            <!--begin::Label-->\r\n            <label class=\"form-label\"\r\n              >Description</label\r\n            >\r\n            <!--end::Label-->\r\n            <!--begin::Input-->\r\n            <textarea\r\n              class=\"form-control form-control-solid\"\r\n              name=\"day_wise_itineary_description_${i + 1}\"\r\n              rows=\"3\"\r\n              placeholder=\"\"\r\n            ></textarea>\r\n            <!--end::Input-->\r\n          </div>\r\n          <!--end::Input group-->\r\n        </div>\r\n      </div>`;\r\n            }\r\n\r\n            $('#day_wise_itinearies_row').html(html);\r\n        };\r\n\r\n        $('[name=\"basic_package_duration_days_&_nights\"]').on(\r\n            'select2:select',\r\n            function (e) {\r\n                var data = e.params.data;\r\n                addDayWiseItineary(data.id);\r\n            }\r\n        );\r\n    };\r\n\r\n    // Select2 initialization\r\n    const initSelect2 = async () => {\r\n        console.log();\r\n        // read json data and create select2\r\n        $.getJSON('../../../../../json/umrah/airlines.json', function (data) {\r\n            const airlines = data.map((item) => {\r\n                return {\r\n                    id: item.code,\r\n                    text: `${item.code} - ${item.name}`,\r\n                };\r\n            });\r\n\r\n            // Create select2\r\n            $('[data-control=\"select2-country\"]').select2({\r\n                placeholder: 'Select an option',\r\n                data: airlines,\r\n            });\r\n        });\r\n    };\r\n\r\n    return {\r\n        // Public Functions\r\n        init: function () {\r\n            stepper = document.querySelector(\r\n                '#kt_umrah_extranet_package_add_stepper'\r\n            );\r\n\r\n            if (!stepper) {\r\n                return;\r\n            }\r\n\r\n            form = stepper.querySelector('#kt_umrah_extranet_package_add_form');\r\n            formSubmitButton = stepper.querySelector(\r\n                '[data-kt-stepper-action=\"submit\"]'\r\n            );\r\n            formContinueButton = stepper.querySelector(\r\n                '[data-kt-stepper-action=\"next\"]'\r\n            );\r\n\r\n            initStepper();\r\n            initValidation();\r\n            handleForm();\r\n            initFileUploader();\r\n            addMoreThumbnails();\r\n            initFlatPickr();\r\n            handleFlightStops();\r\n            handleRepeater();\r\n            initCKEditors();\r\n            handleDayWiseItinearies();\r\n            initSelect2();\r\n        },\r\n    };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTCreatePackage.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/umrah-extranet/create-package.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/umrah-extranet/create-package.js"]();
/******/ 	
/******/ })()
;