/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/umrah-extranet/create-package.js":
/*!*********************************************************************!*\
  !*** ../public/src/js/custom/apps/umrah-extranet/create-package.js ***!
  \*********************************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTCreatePackage = (function () {\n  // Elements\n  var stepper;\n  var form;\n  var formSubmitButton;\n  var formContinueButton;\n\n  // Variables\n  var stepperObj;\n  var validations = [];\n  var ktFileUploaderContent;\n\n  // Private Functions\n  var initStepper = function () {\n    // Initialize Stepper\n    stepperObj = new KTStepper(stepper);\n\n    // Stepper change event\n    stepperObj.on(\"kt.stepper.changed\", function (stepper) {\n      if (stepperObj.getCurrentStepIndex() === 11) {\n        formSubmitButton.classList.remove(\"d-none\");\n        formSubmitButton.classList.add(\"d-inline-block\");\n        formContinueButton.classList.add(\"d-none\");\n      } else if (stepperObj.getCurrentStepIndex() === 12) {\n        formSubmitButton.classList.add(\"d-none\");\n        formContinueButton.classList.add(\"d-none\");\n      } else {\n        formSubmitButton.classList.remove(\"d-inline-block\");\n        formSubmitButton.classList.remove(\"d-none\");\n        formContinueButton.classList.remove(\"d-none\");\n      }\n    });\n\n    // Validation before going to next page\n    stepperObj.on(\"kt.stepper.next\", function (stepper) {\n      console.log(\"stepper.next\");\n\n      // Validate form before change stepper step\n      var validator = validations[stepper.getCurrentStepIndex() - 1]; // get validator for currnt step\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          if (status == \"Valid\") {\n            stepper.goNext();\n\n            KTUtil.scrollTop();\n          } else {\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-light\",\n              },\n            }).then(function () {\n              KTUtil.scrollTop();\n            });\n          }\n        });\n      } else {\n        stepper.goNext();\n\n        KTUtil.scrollTop();\n      }\n    });\n\n    // Prev event\n    stepperObj.on(\"kt.stepper.previous\", function (stepper) {\n      console.log(\"stepper.previous\");\n\n      stepper.goPrevious();\n      KTUtil.scrollTop();\n    });\n  };\n\n  var handleForm = function () {\n    formSubmitButton.addEventListener(\"click\", function (e) {\n      // Validate form before change stepper step\n      var validator = validations[3]; // get validator for last form\n\n      validator.validate().then(function (status) {\n        if (status == \"Valid\") {\n          // Prevent default button action\n          e.preventDefault();\n\n          // Disable button to avoid multiple click\n          formSubmitButton.disabled = true;\n\n          // Show loading indication\n          formSubmitButton.setAttribute(\"data-kt-indicator\", \"on\");\n\n          // Simulate form submission\n          setTimeout(function () {\n            // Hide loading indication\n            formSubmitButton.removeAttribute(\"data-kt-indicator\");\n\n            // Enable button\n            formSubmitButton.disabled = false;\n\n            // Show popup confirmation\n            Swal.fire({\n              text: \"Form has been successfully submitted!\",\n              icon: \"success\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\",\n              },\n            }).then(function (result) {\n              // stepperObj.goNext();\n            });\n          }, 2000);\n        } else {\n          Swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-light\",\n            },\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    });\n\n    // Expiry month. For more info, plase visit the official plugin site: https://select2.org/\n    $(form.querySelector('[name=\"card_expiry_month\"]')).on(\n      \"change\",\n      function () {\n        // Revalidate the field when an option is chosen\n        validations[3].revalidateField(\"card_expiry_month\");\n      }\n    );\n\n    // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\n    $(form.querySelector('[name=\"card_expiry_year\"]')).on(\n      \"change\",\n      function () {\n        // Revalidate the field when an option is chosen\n        validations[3].revalidateField(\"card_expiry_year\");\n      }\n    );\n\n    // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\n    $(form.querySelector('[name=\"business_type\"]')).on(\"change\", function () {\n      // Revalidate the field when an option is chosen\n      validations[2].revalidateField(\"business_type\");\n    });\n  };\n\n  var initValidation = function () {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    // Step 1\n    validations.push(\n      FormValidation.formValidation(form, {\n        fields: {\n          basic_package_thumbnail: {\n            validators: {\n              notEmpty: {\n                message: \"Thumbnail is required\",\n              },\n            },\n          },\n          basic_package_title: {\n            validators: {\n              notEmpty: {\n                message: \"Package title is required\",\n              },\n            },\n          },\n          basic_package_subtitle: {\n            validators: {\n              notEmpty: {\n                message: \"Package subtitle is required\",\n              },\n            },\n          },\n          basic_package_start_location: {\n            validators: {\n              notEmpty: {\n                message: \"Departure location is required\",\n              },\n            },\n          },\n          basic_package_start_date: {\n            validators: {\n              notEmpty: {\n                message: \"Package start date is required\",\n              },\n            },\n          },\n          basic_package_expire_date: {\n            validators: {\n              notEmpty: {\n                message: \"Package start date is required\",\n              },\n            },\n          },\n          basic_package_schedule: {\n            validators: {\n              notEmpty: {\n                message: \"Package schedule is required\",\n              },\n            },\n          },\n          \"basic_package_duration_days_&_nights\": {\n            validators: {\n              notEmpty: {\n                message: \"Total days and is required\",\n              },\n            },\n          },\n          basic_package_type: {\n            validators: {\n              notEmpty: {\n                message: \"Package type is required\",\n              },\n            },\n          },\n          basic_package_status: {\n            validators: {\n              notEmpty: {\n                message: \"Package status is required\",\n              },\n            },\n          },\n          basic_adult_package_price: {\n            validators: {\n              notEmpty: {\n                message: \"Adult package price is required\",\n              },\n              integer: {\n                message: \"The value must be a number\",\n              },\n              greaterThan: {\n                min: 0,\n                inclusive: false,\n                message: \"Adult package price must be a positive number\",\n              },\n            },\n          },\n          basic_child_package_price: {\n            validators: {\n              notEmpty: {\n                message: \"Child package price is required\",\n              },\n              integer: {\n                message: \"The value must be a number\",\n              },\n              greaterThan: {\n                min: 0,\n                inclusive: false,\n                message: \"Child package price must be a positive number\",\n              },\n            },\n          },\n          basic_infant_package_price: {\n            validators: {\n              notEmpty: {\n                message: \"Infant package price is required\",\n              },\n              integer: {\n                message: \"The value must be a number\",\n              },\n              greaterThan: {\n                min: 0,\n                inclusive: false,\n                message: \"Infant package price must be a positive number\",\n              },\n            },\n          },\n          basic_seat_available: {\n            validators: {\n              notEmpty: {\n                message: \"Seat available is required\",\n              },\n              integer: {\n                message: \"The value must be a number\",\n              },\n              greaterThan: {\n                min: 0,\n                inclusive: false,\n                message: \"Seat available must be a positive number\",\n              },\n            },\n          },\n          \"basic_inclusions[]\": {\n            validators: {\n              notEmpty: {\n                message: \"Inclusions is required\",\n              },\n            },\n          },\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: \".fv-row\",\n            eleInvalidClass: \"\",\n            eleValidClass: \"\",\n          }),\n        },\n      })\n    );\n\n    // Step 2\n    validations.push(\n      FormValidation.formValidation(form, {\n        fields: {\n          outbound_airline_code: {\n            validators: {\n              notEmpty: {\n                message: \"Airline code is required\",\n              },\n            },\n          },\n          outbound_flight_no: {\n            validators: {\n              notEmpty: {\n                message: \"Flight number is required\",\n              },\n            },\n          },\n          outbound_booking_class: {\n            validators: {\n              notEmpty: {\n                message: \"Flight class is required\",\n              },\n            },\n          },\n          outbound_aircraft_model: {\n            validators: {\n              notEmpty: {\n                message: \"Airline model is required\",\n              },\n            },\n          },\n          outbound_departure_airport: {\n            validators: {\n              notEmpty: {\n                message: \"Departure from is required\",\n              },\n            },\n          },\n          outbound_arrival_airport: {\n            validators: {\n              notEmpty: {\n                message: \"Arrival to is required\",\n              },\n            },\n          },\n          outbound_departure_datetime: {\n            validators: {\n              notEmpty: {\n                message: \"Departure datetime is required\",\n              },\n            },\n          },\n          outbound_arrival_datetime: {\n            validators: {\n              notEmpty: {\n                message: \"Arrival datetime is required\",\n              },\n            },\n          },\n          outbound_flight_stops: {\n            validators: {\n              notEmpty: {\n                message: \"Flight stops is required\",\n              },\n            },\n          },\n          outbound_adult_baggage_checkin: {\n            validators: {\n              notEmpty: {\n                message: \"Adult baggage check-in is required\",\n              },\n            },\n          },\n          outbound_adult_baggage_cabin: {\n            validators: {\n              notEmpty: {\n                message: \"Adult baggage cabin is required\",\n              },\n            },\n          },\n          outbound_child_baggage_checkin: {\n            validators: {\n              notEmpty: {\n                message: \"Child baggage check-in is required\",\n              },\n            },\n          },\n          outbound_child_baggage_cabin: {\n            validators: {\n              notEmpty: {\n                message: \"Child baggage cabin is required\",\n              },\n            },\n          },\n          outbound_infant_baggage_checkin: {\n            validators: {\n              notEmpty: {\n                message: \"Infant baggage check-in is required\",\n              },\n            },\n          },\n          outbound_infant_baggage_cabin: {\n            validators: {\n              notEmpty: {\n                message: \"Infant baggage cabin is required\",\n              },\n            },\n          },\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          // Bootstrap Framework Integration\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: \".fv-row\",\n            eleInvalidClass: \"\",\n            eleValidClass: \"\",\n          }),\n        },\n      })\n    );\n\n    // Step 3\n    validations.push(\n      FormValidation.formValidation(form, {\n        fields: {\n          makkah_hotel_thumbnail: {\n            validators: {\n              notEmpty: {\n                message: \"Thumbnail is required\",\n              },\n            },\n          },\n          makkah_hotel_stay_duration: {\n            validators: {\n              notEmpty: {\n                message: \"Stay duration is required\",\n              },\n            },\n          },\n          makkah_hotel_name: {\n            validators: {\n              notEmpty: {\n                message: \"Hotel name is required\",\n              },\n            },\n          },\n          makkah_hotel_address: {\n            validators: {\n              notEmpty: {\n                message: \"Address is required\",\n              },\n            },\n          },\n          makkah_hotel_rating: {\n            validators: {\n              notEmpty: {\n                message: \"Rating is required\",\n              },\n            },\n          },\n          makkah_hotel_distance_from_haram: {\n            validators: {\n              notEmpty: {\n                message: \"Distance from Haram is required\",\n              },\n            },\n          },\n          makkah_hotel_distance_from_haram_unit: {\n            validators: {\n              notEmpty: {\n                message: \"Distance unit is required\",\n              },\n            },\n          },\n          makkah_hotel_walking_distance_from_haram: {\n            validators: {\n              notEmpty: {\n                message: \"Walking distance from Haram is required\",\n              },\n            },\n          },\n          makkah_hotel_google_map_link: {\n            validators: {\n              notEmpty: {\n                message: \"Google map link is required\",\n              },\n            },\n          },\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          // Bootstrap Framework Integration\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: \".fv-row\",\n            eleInvalidClass: \"\",\n            eleValidClass: \"\",\n          }),\n        },\n      })\n    );\n\n    // Step 4\n    validations.push(\n      FormValidation.formValidation(form, {\n        fields: {\n          madinah_hotel_thumbnail: {\n            validators: {\n              notEmpty: {\n                message: \"Thumbnail is required\",\n              },\n            },\n          },\n          madinah_hotel_stay_duration: {\n            validators: {\n              notEmpty: {\n                message: \"Stay duration is required\",\n              },\n            },\n          },\n          madinah_hotel_name: {\n            validators: {\n              notEmpty: {\n                message: \"Hotel name is required\",\n              },\n            },\n          },\n          madinah_hotel_address: {\n            validators: {\n              notEmpty: {\n                message: \"Address is required\",\n              },\n            },\n          },\n          madinah_hotel_rating: {\n            validators: {\n              notEmpty: {\n                message: \"Rating is required\",\n              },\n            },\n          },\n          madinah_hotel_distance_from_masjid_e_nabwi: {\n            validators: {\n              notEmpty: {\n                message: \"Distance from Masjid-e-Nabwi is required\",\n              },\n            },\n          },\n          madinah_hotel_distance_from_masjid_e_nabwi_unit: {\n            validators: {\n              notEmpty: {\n                message: \"Distance unit is required\",\n              },\n            },\n          },\n          madinah_hotel_walking_distance_from_masjid_e_nabwi: {\n            validators: {\n              notEmpty: {\n                message: \"Walking distance from Masjid-e-Nabwi is required\",\n              },\n            },\n          },\n          madinah_hotel_google_map_link: {\n            validators: {\n              notEmpty: {\n                message: \"Google map link is required\",\n              },\n            },\n          },\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          // Bootstrap Framework Integration\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: \".fv-row\",\n            eleInvalidClass: \"\",\n            eleValidClass: \"\",\n          }),\n        },\n      })\n    );\n\n    // Step 5\n    validations.push(\n      FormValidation.formValidation(form, {\n        fields: {\n          inbound_airline_code: {\n            validators: {\n              notEmpty: {\n                message: \"Airline code is required\",\n              },\n            },\n          },\n          inbound_flight_no: {\n            validators: {\n              notEmpty: {\n                message: \"Flight number is required\",\n              },\n            },\n          },\n          inbound_flight_class: {\n            validators: {\n              notEmpty: {\n                message: \"Flight class is required\",\n              },\n            },\n          },\n          inbound_airline_model: {\n            validators: {\n              notEmpty: {\n                message: \"Airline model is required\",\n              },\n            },\n          },\n          inbound_departure_airport: {\n            validators: {\n              notEmpty: {\n                message: \"Departure from is required\",\n              },\n            },\n          },\n          inbound_arrival_airport: {\n            validators: {\n              notEmpty: {\n                message: \"Arrival to is required\",\n              },\n            },\n          },\n          inbound_departure_datetime: {\n            validators: {\n              notEmpty: {\n                message: \"Departure datetime is required\",\n              },\n            },\n          },\n          inbound_arrival_datetime: {\n            validators: {\n              notEmpty: {\n                message: \"Arrival datetime is required\",\n              },\n            },\n          },\n          inbound_flight_stops: {\n            validators: {\n              notEmpty: {\n                message: \"Flight stops is required\",\n              },\n            },\n          },\n          inbound_adult_baggage_checkin: {\n            validators: {\n              notEmpty: {\n                message: \"Adult baggage check-in is required\",\n              },\n            },\n          },\n          inbound_adult_baggage_cabin: {\n            validators: {\n              notEmpty: {\n                message: \"Adult baggage cabin is required\",\n              },\n            },\n          },\n          inbound_child_baggage_checkin: {\n            validators: {\n              notEmpty: {\n                message: \"Child baggage check-in is required\",\n              },\n            },\n          },\n          inbound_child_baggage_cabin: {\n            validators: {\n              notEmpty: {\n                message: \"Child baggage cabin is required\",\n              },\n            },\n          },\n          inbound_infant_baggage_checkin: {\n            validators: {\n              notEmpty: {\n                message: \"Infant baggage check-in is required\",\n              },\n            },\n          },\n          inbound_infant_baggage_cabin: {\n            validators: {\n              notEmpty: {\n                message: \"Infant baggage cabin is required\",\n              },\n            },\n          },\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          // Bootstrap Framework Integration\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: \".fv-row\",\n            eleInvalidClass: \"\",\n            eleValidClass: \"\",\n          }),\n        },\n      })\n    );\n\n    // Step 6\n    validations.push(\n      FormValidation.formValidation(form, {\n        fields: {\n          visa_type: {\n            validators: {\n              notEmpty: {\n                message: \"Visa type is required\",\n              },\n            },\n          },\n          visa_entries: {\n            validators: {\n              notEmpty: {\n                message: \"Visa entries is required\",\n              },\n            },\n          },\n          visa_duration: {\n            validators: {\n              notEmpty: {\n                message: \"Visa duration is required\",\n              },\n              positive: {\n                message: \"Visa validity must be a positive number\",\n              },\n              greaterThan: {\n                min: 0,\n                inclusive: false,\n                message: \"Visa validity must be a positive number\",\n              },\n            },\n          },\n          visa_validity: {\n            validators: {\n              notEmpty: {\n                message: \"Visa validity is required\",\n              },\n              positive: {\n                message: \"Visa validity must be a positive number\",\n              },\n              greaterThan: {\n                min: 0,\n                inclusive: false,\n                message: \"Visa validity must be a positive number\",\n              },\n            },\n          },\n          \"visa_required[]\": {\n            validators: {\n              notEmpty: {\n                message: \"Value is required\",\n              },\n            },\n          },\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          // Bootstrap Framework Integration\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: \".fv-row\",\n            eleInvalidClass: \"\",\n            eleValidClass: \"\",\n          }),\n        },\n      })\n    );\n\n    // Step 7\n    validations.push(\n      FormValidation.formValidation(form, {\n        fields: {\n          transport_type: {\n            validators: {\n              notEmpty: {\n                message: \"Transport type is required\",\n              },\n            },\n          },\n          transport_airport_to_hotel: {\n            validators: {\n              notEmpty: {\n                message: \"Airport to hotel is required\",\n              },\n            },\n          },\n          transport_visitor_place: {\n            validators: {\n              notEmpty: {\n                message: \"Visitor place is required\",\n              },\n            },\n          },\n          transport_hotel_to_airport: {\n            validators: {\n              notEmpty: {\n                message: \"Hotel to airport is required\",\n              },\n            },\n          },\n          \"transport_bus_service[]\": {\n            validators: {\n              notEmpty: {\n                message: \"Value is required\",\n              },\n            },\n          },\n          \"transport_bus_service_type[]\": {\n            validators: {\n              notEmpty: {\n                message: \"Bus service type is required\",\n              },\n            },\n          },\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          // Bootstrap Framework Integration\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: \".fv-row\",\n            eleInvalidClass: \"\",\n            eleValidClass: \"\",\n          }),\n        },\n      })\n    );\n\n    // Step 8\n    validations.push(\n      FormValidation.formValidation(form, {\n        fields: {\n          ziyara_days: {\n            validators: {\n              notEmpty: {\n                message: \"The value is required\",\n              },\n            },\n          },\n          ziyara_makkah: {\n            validators: {\n              notEmpty: {\n                message: \"The value is required\",\n              },\n            },\n          },\n          ziyara_madinah: {\n            validators: {\n              notEmpty: {\n                message: \"The value is required\",\n              },\n            },\n          },\n          ziyara_taif: {\n            validators: {\n              notEmpty: {\n                message: \"The value is required\",\n              },\n            },\n          },\n          \"ziyara_makkah_details[]\": {\n            validators: {\n              notEmpty: {\n                message: \"Makkah ziyara details is required\",\n              },\n            },\n          },\n          \"ziyara_madinah_details[]\": {\n            validators: {\n              notEmpty: {\n                message: \"Madinah ziyara details is required\",\n              },\n            },\n          },\n          \"ziyara_taif_details[]\": {\n            validators: {\n              notEmpty: {\n                message: \"Taif ziyara details is required\",\n              },\n            },\n          },\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          // Bootstrap Framework Integration\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: \".fv-row\",\n            eleInvalidClass: \"\",\n            eleValidClass: \"\",\n          }),\n        },\n      })\n    );\n\n    // Step 9\n    validations.push(\n      FormValidation.formValidation(form, {\n        fields: {},\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          // Bootstrap Framework Integration\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: \".fv-row\",\n            eleInvalidClass: \"\",\n            eleValidClass: \"\",\n          }),\n        },\n      })\n    );\n\n    // Step 10\n    validations.push(\n      FormValidation.formValidation(form, {\n        fields: {\n          about_umrah_thumbnail: {\n            validators: {\n              notEmpty: {\n                message: \"Thumbnail is required\",\n              },\n            },\n          },\n          about_umrah_title: {\n            validators: {\n              notEmpty: {\n                message: \"Title is required\",\n              },\n            },\n          },\n          about_umrah_short_description: {\n            validators: {\n              notEmpty: {\n                message: \"Short description is required\",\n              },\n            },\n          },\n          about_umrah_description: {\n            validators: {\n              notEmpty: {\n                message: \"Description is required\",\n              },\n            },\n          },\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          // Bootstrap Framework Integration\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: \".fv-row\",\n            eleInvalidClass: \"\",\n            eleValidClass: \"\",\n          }),\n        },\n      })\n    );\n\n    // Step 11\n    validations.push(\n      FormValidation.formValidation(form, {\n        fields: {\n          terms_conditions_description: {\n            validators: {\n              notEmpty: {\n                message: \"Description is required\",\n              },\n            },\n          },\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          // Bootstrap Framework Integration\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: \".fv-row\",\n            eleInvalidClass: \"\",\n            eleValidClass: \"\",\n          }),\n        },\n      })\n    );\n  };\n\n  // Init File Uploader\n  const initFileUploader = () => {\n    const handleFileInputChange = (input) => {\n      const previewContainer = input.closest(\".kt-file-uploader\");\n      const label = previewContainer.querySelector(\".kt-file-uploader-label\");\n      const maxFileSize = parseInt(\n        input.getAttribute(\"data-kt-file-uploader-max-size\")\n      );\n      const invalidMessage =\n        previewContainer.querySelector(\".invalid-feedback\");\n      const file = input.files[0];\n\n      if (!file) {\n        return;\n      }\n\n      // remove error message\n      invalidMessage.classList.add(\"d-none\");\n\n      // create preview element and append to the container\n      const preview = document.createElement(\"img\");\n\n      if (file?.size > 1024 * 1024 * maxFileSize) {\n        const message = `File size should not exceed ${maxFileSize}MB`;\n\n        if (ktFileUploaderContent) {\n          // restore label content\n          label.innerHTML = ktFileUploaderContent;\n        }\n\n        // empty input value\n        input.value = \"\";\n\n        // append error message\n        invalidMessage.innerHTML = message;\n        invalidMessage.classList.remove(\"d-none\");\n        return;\n      }\n\n      // add was-invalid class to the container\n      if (!previewContainer.classList.contains(\"was-invalided\")) {\n        ktFileUploaderContent = label.innerHTML;\n        previewContainer.classList.add(\"was-invalided\");\n      }\n\n      // remove content and append preview\n      label.innerHTML = \"\";\n      preview.classList.add(\"kt-file-uploader-preview\");\n      preview.src = URL.createObjectURL(file);\n      preview.alt = file.name;\n      label.appendChild(preview);\n    };\n\n    form.addEventListener(\"change\", function (event) {\n      const target = event.target;\n\n      // Check if the changed element is an input with type file\n      if (target.tagName === \"INPUT\" && target.type === \"file\") {\n        handleFileInputChange(target);\n      }\n    });\n  };\n\n  // Add more thumbnails\n  const addMoreThumbnails = () => {\n    const dropZoneBasicThumbnails = new Dropzone(\n      \"#kt_dropzonejs_basic_thumbnails\",\n      {\n        url: \"https://keenthemes.com/scripts/void.php\", // Set the url for your upload script location\n        paramName: \"file\", // The name that will be used to transfer the file\n        maxFiles: 10,\n        maxFilesize: 10, // MB\n        addRemoveLinks: true,\n        accept: function (file, done) {\n          if (file.name == \"wow.jpg\") {\n            done(\"Naha, you don't.\");\n          } else {\n            done();\n          }\n        },\n      }\n    );\n    const dropZoneMakkahThumbnails = new Dropzone(\n      \"#kt_dropzonejs_makkah_hotel_thumbnails\",\n      {\n        url: \"https://keenthemes.com/scripts/void.php\", // Set the url for your upload script location\n        paramName: \"file\", // The name that will be used to transfer the file\n        maxFiles: 10,\n        maxFilesize: 10, // MB\n        addRemoveLinks: true,\n        accept: function (file, done) {\n          if (file.name == \"wow.jpg\") {\n            done(\"Naha, you don't.\");\n          } else {\n            done();\n          }\n        },\n      }\n    );\n    const dropZoneMadinahThumbnails = new Dropzone(\n      \"#kt_dropzonejs_madinah_hotel_thumbnails\",\n      {\n        url: \"https://keenthemes.com/scripts/void.php\", // Set the url for your upload script location\n        paramName: \"file\", // The name that will be used to transfer the file\n        maxFiles: 10,\n        maxFilesize: 10, // MB\n        addRemoveLinks: true,\n        accept: function (file, done) {\n          if (file.name == \"wow.jpg\") {\n            done(\"Naha, you don't.\");\n          } else {\n            done();\n          }\n        },\n      }\n    );\n  };\n\n  // Init flatpickr\n  var initFlatPickr = function () {\n    const datepicker = form.querySelectorAll(\n      \"[data-flatpickr=package_date_picker]\"\n    );\n    const datetimepicker = form.querySelectorAll(\n      \"[data-flatpickr=package_datetime_picker]\"\n    );\n    const timepicker = form.querySelectorAll(\n      \"[data-flatpickr=package_time_picker]\"\n    );\n\n    // Handle datepicker -- For more info on flatpickr plugin, please visit: https://flatpickr.js.org/\n    $(datepicker).flatpickr({\n      altInput: true,\n      altFormat: \"j F, Y\",\n      minDate: \"today\",\n      maxDate: new Date().fp_incr(365), // 365 days from now\n    });\n\n    // Handle datetimepicker -- For more info on flatpickr plugin, please visit: https://flatpickr.js.org/\n    $(datetimepicker).flatpickr({\n      enableTime: true,\n      altInput: true,\n      time_24hr: true,\n      minuteIncrement: 1,\n      altFormat: \"j F, Y H:i\",\n      minDate: \"today\",\n      maxDate: new Date().fp_incr(365), // 365 days from now\n    });\n\n    // Handle timepicker -- For more info on flatpickr plugin, please visit: https://flatpickr.js.org/\n    $(timepicker).flatpickr({\n      enableTime: true,\n      noCalendar: true,\n      dateFormat: \"H:i\",\n      time_24hr: true,\n      minuteIncrement: 1,\n    });\n  };\n\n  // Flight stops handler\n  const handleFlightStops = () => {\n    const select = $('[data-kt-umrah-extranet-flight-stops-select=\"true\"]');\n    let stepper;\n    let firstTimepicker;\n    let secondTimepicker;\n    let firstAirportInput;\n    let secondAirportInput;\n\n    $(select).on(\"change\", function (e) {\n      const value = e.target.value;\n      stepper = $(this).closest('[data-kt-stepper-element=\"content\"]');\n      firstTimepicker = $(stepper).find('[data-flatpickr-time=\"1st\"]');\n      secondTimepicker = $(stepper).find('[data-flatpickr-time=\"2nd\"]');\n      firstAirportInput = $(stepper).find('[data-layover-airport=\"1st\"]');\n      secondAirportInput = $(stepper).find('[data-layover-airport=\"2nd\"]');\n\n      switch (value) {\n        case \"one-stop\": {\n          showFirstTimePicker();\n          showFirstAirportInput();\n          hideSecondTimePicker();\n          hideSecondAirportInput();\n          break;\n        }\n        case \"two-stop\": {\n          showFirstTimePicker();\n          showFirstAirportInput();\n          showSecondTimePicker();\n          showSecondAirportInput();\n          break;\n        }\n        case \"non-stop\": {\n          hideFirstTimePicker();\n          hideFirstAirportInput();\n          hideSecondTimePicker();\n          hideSecondAirportInput();\n          break;\n        }\n        default:\n          break;\n      }\n    });\n\n    // Handle timepicker\n    const showFirstTimePicker = () => {\n      $(firstTimepicker).parent().parent().removeClass(\"d-none\");\n    };\n\n    const hideFirstTimePicker = () => {\n      $(firstTimepicker).parent().parent().addClass(\"d-none\");\n    };\n\n    const showSecondTimePicker = () => {\n      $(secondTimepicker).parent().parent().removeClass(\"d-none\");\n    };\n\n    const hideSecondTimePicker = () => {\n      $(secondTimepicker).parent().parent().addClass(\"d-none\");\n    };\n\n    // Handle airport inputs\n    const showFirstAirportInput = () => {\n      $(firstAirportInput).parent().parent().removeClass(\"d-none\");\n    };\n\n    const hideFirstAirportInput = () => {\n      $(firstAirportInput).parent().parent().addClass(\"d-none\");\n    };\n\n    const showSecondAirportInput = () => {\n      $(secondAirportInput).parent().parent().removeClass(\"d-none\");\n    };\n\n    const hideSecondAirportInput = () => {\n      $(secondAirportInput).parent().parent().addClass(\"d-none\");\n    };\n  };\n\n  // Repeater handler\n  const handleRepeater = () => {\n    $(\n      \"#kt_repeater_visa_required, #kt_repeater_transport_service, #kt_repeater_day_wise_itinearies, #kt_repeater_ziyara_makkah_details, #kt_repeater_ziyara_madinah_details, #kt_repeater_ziyara_taif_details\"\n    ).repeater({\n      initEmpty: false,\n\n      show: function () {\n        $(this).slideDown();\n      },\n\n      hide: function (deleteElement) {\n        $(this).slideUp(deleteElement);\n      },\n\n      isFirstItemUndeletable: true,\n    });\n  };\n\n  // CKEditors\n  const initCKEditors = () => {\n    const textareas = [\n      \"kt_docs_ckeditor_about_us_description\",\n      \"kt_docs_ckeditor_terms_&_conditions_description\",\n    ];\n\n    textareas.forEach((id) => {\n      ClassicEditor.create(document.getElementById(id))\n        .then((editor) => {\n          console.log(editor);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    });\n  };\n\n  // Day wise itinearies\n  const handleDayWiseItinearies = () => {\n    const addDayWiseItineary = (days) => {\n      let html = \"\";\n\n      for (let i = 0; i < days; i++) {\n        html += `\n        <div class=\"row border-bottom\">\n        <div class=\"col-lg-12\">\n          <h3 class=\"fs-4 mb-4 pb-4 border-bottom\">\n            Day ${i + 1 > 9 ? i + 1 : \"0\" + (i + 1)}\n          </h3>\n        </div>\n        <div class=\"col-lg-12\">\n          <!--begin::Input group-->\n          <div class=\"fv-row mb-10\">\n            <!--begin::Label-->\n            <label class=\"form-label\">Thumbnail</label>\n            <!--end::Label-->\n            <!--begin::Input group-->\n            <div class=\"fv-row\">\n              <!--begin::Preview Container-->\n              <div class=\"kt-file-uploader\">\n                <!--begin::Message-->\n                <label\n                  class=\"kt-file-uploader-label d-flex flex-column flex-xl-row align-items-center align-items-xl-start text-center text-xl-start\"\n                  for=\"day_wise_itineary_thumbnail_${i + 1}\"\n                >\n                  <i\n                    class=\"ki-duotone ki-file-up fs-3x text-primary\"\n                    ><span class=\"path1\"></span\n                    ><span class=\"path2\"></span>\n                  </i>\n                  <!--begin::Info-->\n                  <div class=\"ms-xl-4 mt-4 mt-xl-0\">\n                    <h3\n                      class=\"fs-5 fw-bold text-gray-900 mb-1\"\n                    >\n                      Upload thumbnail\n                    </h3>\n                    <span\n                      class=\"fs-7 fw-semibold text-gray-500\"\n                    >\n                      PNG, JPG, JPEG up to 10MB\n                    </span>\n                  </div>\n                  <!--end::Info-->\n                </label>\n                <!--end::Message-->\n                <!--begin::Input-->\n                <input\n                  type=\"file\"\n                  name=\"day_wise_itineary_thumbnail_1\"\n                  id=\"day_wise_itineary_thumbnail_${i + 1}\"\n                  accept=\".png, .jpg, .jpeg\"\n                  data-kt-file-uploader-max-size=\"10\"\n                  hidden\n                  class=\"d-none\"\n                />\n                <!--end::Input-->\n                <!--begin::Error Message -->\n                <div\n                  class=\"invalid-feedback d-block\"\n                ></div>\n                <!--end::Error Message-->\n              </div>\n              <!--end::Preview Container-->\n            </div>\n            <!--end::Input group-->\n          </div>\n          <!--end::Input group-->\n        </div>\n        <div class=\"col-lg-12\">\n          <!--begin::Input group-->\n          <div class=\"fv-row mb-10\">\n            <!--begin::Label-->\n            <label class=\"form-label\">Title</label>\n            <!--end::Label-->\n            <!--begin::Input-->\n            <input\n              type=\"text\"\n              class=\"form-control form-control-solid\"\n              name=\"day_wise_itineary_title_${i + 1}\"\n              placeholder=\"\"\n              value=\"\"\n            />\n            <!--end::Input-->\n          </div>\n          <!--end::Input group-->\n        </div>\n        <div class=\"col-lg-12\">\n          <!--begin::Input group-->\n          <div class=\"fv-row mb-10\">\n            <!--begin::Label-->\n            <label class=\"form-label\"\n              >Description</label\n            >\n            <!--end::Label-->\n            <!--begin::Input-->\n            <textarea\n              class=\"form-control form-control-solid\"\n              name=\"day_wise_itineary_description_${i + 1}\"\n              rows=\"3\"\n              placeholder=\"\"\n            ></textarea>\n            <!--end::Input-->\n          </div>\n          <!--end::Input group-->\n        </div>\n      </div>`;\n      }\n\n      $(\"#day_wise_itinearies_row\").html(html);\n    };\n\n    $('[name=\"basic_package_duration_days_&_nights\"]').on(\n      \"select2:select\",\n      function (e) {\n        var data = e.params.data;\n        addDayWiseItineary(data.id);\n      }\n    );\n  };\n\n  return {\n    // Public Functions\n    init: function () {\n      stepper = document.querySelector(\n        \"#kt_umrah_extranet_package_add_stepper\"\n      );\n\n      if (!stepper) {\n        return;\n      }\n\n      form = stepper.querySelector(\"#kt_umrah_extranet_package_add_form\");\n      formSubmitButton = stepper.querySelector(\n        '[data-kt-stepper-action=\"submit\"]'\n      );\n      formContinueButton = stepper.querySelector(\n        '[data-kt-stepper-action=\"next\"]'\n      );\n\n      initStepper();\n      initValidation();\n      handleForm();\n      initFileUploader();\n      addMoreThumbnails();\n      initFlatPickr();\n      handleFlightStops();\n      handleRepeater();\n      initCKEditors();\n      handleDayWiseItinearies();\n    },\n  };\n})();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTCreatePackage.init();\n});\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/umrah-extranet/create-package.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/umrah-extranet/create-package.js"]();
/******/ 	
/******/ })()
;