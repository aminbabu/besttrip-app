/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/customers/update-wallet.js":
/*!***************************************************************!*\
  !*** ../public/src/js/custom/apps/customers/update-wallet.js ***!
  \***************************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTModalUpdateCustomer = (function () {\n    var element;\n    var submitButton;\n    var cancelButton;\n    var closeButton;\n    var validator;\n    var form;\n    var modal;\n\n    // Init form inputs\n    var initForm = function () {\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validator = FormValidation.formValidation(form, {\n            fields: {\n                balance: {\n                    validators: {\n                        notEmpty: {\n                            message: 'Balance is required',\n                        },\n                    },\n                },\n                type: {\n                    validators: {\n                        notEmpty: {\n                            message: 'Adjustment type is required',\n                        },\n                    },\n                },\n                description: {\n                    validators: {\n                        notEmpty: {\n                            message: 'Description is required',\n                        },\n                    },\n                },\n            },\n            plugins: {\n                trigger: new FormValidation.plugins.Trigger(),\n                bootstrap: new FormValidation.plugins.Bootstrap5({\n                    rowSelector: '.fv-row',\n                    eleInvalidClass: '',\n                    eleValidClass: '',\n                }),\n            },\n        });\n\n        // Action buttons\n        submitButton.addEventListener('click', function (e) {\n            // Prevent default button action\n            e.preventDefault();\n\n            // Validate form before submit\n            if (validator) {\n                validator.validate().then(function (status) {\n                    if (status == 'Valid') {\n                        submitButton.setAttribute('data-kt-indicator', 'on');\n\n                        // Disable submit button whilst loading\n                        submitButton.disabled = true;\n\n                        // Check axios library docs: https://axios-http.com/docs/intro\n                        axios\n                            .patch(\n                                submitButton\n                                    .closest('form')\n                                    .getAttribute('action'),\n                                new FormData(form)\n                            )\n                            .then((response) => {\n                                Swal.fire({\n                                    text:\n                                        response?.data?.message ||\n                                        'Wallet has been successfully updated!',\n                                    icon: 'success',\n                                    buttonsStyling: false,\n                                    confirmButtonText: 'Ok, got it!',\n                                    customClass: {\n                                        confirmButton: 'btn btn-primary',\n                                    },\n                                    allowOutsideClick: false,\n                                }).then((result) => {\n                                    if (result.isConfirmed) {\n                                        modal.hide();\n                                        location.reload();\n                                    }\n                                });\n                            })\n                            .catch((error) => {\n                                const errors = error.response?.data?.message\n                                    ? error.response?.data?.message\n                                    : error?.response?.data?.errors;\n\n                                Swal.fire({\n                                    html: `${\n                                        errors instanceof Array\n                                            ? `<ul class=\"text-start\">${Object.values(\n                                                  error.response.data.errors\n                                              )\n                                                  .map(\n                                                      (err) =>\n                                                          `<li>${err?.message}</li>`\n                                                  )\n                                                  .join('')}</ul>`\n                                            : errors\n                                    }`,\n                                    icon: 'error',\n                                    buttonsStyling: false,\n                                    confirmButtonText: 'Ok, got it!',\n                                    customClass: {\n                                        confirmButton: 'btn btn-primary',\n                                    },\n                                });\n                            })\n                            .then(() => {\n                                // Hide loading indication\n                                submitButton.removeAttribute(\n                                    'data-kt-indicator'\n                                );\n\n                                // Enable button\n                                submitButton.disabled = false;\n                            });\n                    } else {\n                        Swal.fire({\n                            text: 'Sorry, looks like there are some errors detected, please try again.',\n                            icon: 'error',\n                            buttonsStyling: false,\n                            confirmButtonText: 'Ok, got it!',\n                            customClass: {\n                                confirmButton: 'btn btn-primary',\n                            },\n                        });\n                    }\n                });\n            }\n        });\n\n        cancelButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            Swal.fire({\n                text: 'Are you sure you would like to cancel?',\n                icon: 'warning',\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: 'Yes, cancel it!',\n                cancelButtonText: 'No, return',\n                customClass: {\n                    confirmButton: 'btn btn-primary',\n                    cancelButton: 'btn btn-active-light',\n                },\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\n                    modal.hide(); // Hide modal\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: 'Your form has not been cancelled!.',\n                        icon: 'error',\n                        buttonsStyling: false,\n                        confirmButtonText: 'Ok, got it!',\n                        customClass: {\n                            confirmButton: 'btn btn-primary',\n                        },\n                    });\n                }\n            });\n        });\n\n        closeButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            Swal.fire({\n                text: 'Are you sure you would like to cancel?',\n                icon: 'warning',\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: 'Yes, cancel it!',\n                cancelButtonText: 'No, return',\n                customClass: {\n                    confirmButton: 'btn btn-primary',\n                    cancelButton: 'btn btn-active-light',\n                },\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\n                    modal.hide(); // Hide modal\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: 'Your form has not been cancelled!.',\n                        icon: 'error',\n                        buttonsStyling: false,\n                        confirmButtonText: 'Ok, got it!',\n                        customClass: {\n                            confirmButton: 'btn btn-primary',\n                        },\n                    });\n                }\n            });\n        });\n    };\n    const calculateNewBalance = () => {\n        const newBalanceEl = document.querySelector(\n            '[kt-modal-adjust-balance=\"new_balance\"]'\n        );\n        const currentBalanceEl = document.querySelector(\n            '[kt-modal-adjust-balance=\"current_balance\"] span'\n        );\n        const input = document.querySelector('input[name=\"balance\"]');\n        const $select = $('select[name=\"type\"]');\n\n        if (!input || !newBalanceEl || !$select?.length) {\n            return;\n        }\n\n        // Function to update the balance\n        const updateBalance = () => {\n            const value = Number(input.value); // Get the value from the input\n            const currentBalance = Number(currentBalanceEl.innerHTML);\n            const type = $select.val(); // Get the selected type (top-up or deduct)\n\n            console.log(type);\n\n            let balance;\n\n            if (type === 'top-up') {\n                balance = currentBalance + value;\n            } else if (type === 'deduct') {\n                balance = currentBalance - value;\n            } else {\n                balance = currentBalance;\n            }\n\n            newBalanceEl.innerHTML = balance ? `৳ ${balance} BDT` : '--';\n        };\n\n        // Listen for changes in the balance input and the select input\n        input.addEventListener('input', updateBalance);\n        $select.select2().on('select2:select', updateBalance);\n    };\n\n    return {\n        // Public functions\n        init: function () {\n            // Elements\n            element = document.querySelector('#kt_modal_adjust_balance');\n\n            if (!element) {\n                return;\n            }\n\n            modal = new bootstrap.Modal(element);\n\n            form = element.querySelector('#kt_modal_adjust_balance_form');\n            submitButton = form.querySelector(\n                '#kt_modal_adjust_balance_submit'\n            );\n            cancelButton = form.querySelector(\n                '#kt_modal_adjust_balance_cancel'\n            );\n            closeButton = element.querySelector(\n                '#kt_modal_adjust_balance_close'\n            );\n\n            initForm();\n            calculateNewBalance();\n        },\n    };\n})();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTModalUpdateCustomer.init();\n});\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/customers/update-wallet.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/customers/update-wallet.js"]();
/******/ 	
/******/ })()
;