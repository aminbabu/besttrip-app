/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/customers/update.js":
/*!********************************************************!*\
  !*** ../public/src/js/custom/apps/customers/update.js ***!
  \********************************************************/
/***/ (() => {

eval("\r\n\r\n// Class definition\r\nvar KTModalUpdateCustomer = (function () {\r\n    var element;\r\n    var submitButton;\r\n    var cancelButton;\r\n    var closeButton;\r\n    var validator;\r\n    var form;\r\n    var modal;\r\n\r\n    // Init form inputs\r\n    var initForm = function () {\r\n        // Init Datepicker --- For more info, please check Flatpickr's official documentation: https://flatpickr.js.org/\r\n        $('#kt_customer_birth_datepicker').flatpickr({\r\n            enableTime: false,\r\n            dateFormat: 'Y-m-d',\r\n            maxDate: 'today',\r\n        });\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        validator = FormValidation.formValidation(form, {\r\n            fields: {\r\n                name: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Customer name is required',\r\n                        },\r\n                    },\r\n                },\r\n                email: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Customer email is required',\r\n                        },\r\n                        regexp: {\r\n                            regexp: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                            message: 'The value is not a valid email address',\r\n                        },\r\n                    },\r\n                },\r\n                phone: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Customer phone is required',\r\n                        },\r\n                    },\r\n                },\r\n                // dob: {\r\n                //     validators: {\r\n                //         notEmpty: {\r\n                //             message: 'Customer birth date is required',\r\n                //         },\r\n                //     },\r\n                // },\r\n                // country: {\r\n                //   validators: {\r\n                //     notEmpty: {\r\n                //       message: \"Country is required\",\r\n                //     },\r\n                //   },\r\n                // },\r\n                // address1: {\r\n                //   validators: {\r\n                //     notEmpty: {\r\n                //       message: \"Address 1 is required\",\r\n                //     },\r\n                //   },\r\n                // },\r\n                // city: {\r\n                //   validators: {\r\n                //     notEmpty: {\r\n                //       message: \"City is required\",\r\n                //     },\r\n                //   },\r\n                // },\r\n                // state: {\r\n                //   validators: {\r\n                //     notEmpty: {\r\n                //       message: \"State is required\",\r\n                //     },\r\n                //   },\r\n                // },\r\n                // postcode: {\r\n                //   validators: {\r\n                //     notEmpty: {\r\n                //       message: \"Postcode is required\",\r\n                //     },\r\n                //   },\r\n                // },\r\n            },\r\n            plugins: {\r\n                trigger: new FormValidation.plugins.Trigger(),\r\n                bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                    rowSelector: '.fv-row',\r\n                    eleInvalidClass: '',\r\n                    eleValidClass: '',\r\n                }),\r\n            },\r\n        });\r\n\r\n        // Action buttons\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    if (status == 'Valid') {\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable submit button whilst loading\r\n                        submitButton.disabled = true;\r\n\r\n                        // Customer form data\r\n                        const customerFormData = new FormData();\r\n\r\n                        // Form fields\r\n                        const formFields = [\r\n                            'name',\r\n                            'email',\r\n                            'phone',\r\n                            'dob',\r\n                            'flyerNumber',\r\n                            'address',\r\n                            'city',\r\n                            'state',\r\n                            'country',\r\n                            'postalCode',\r\n                        ];\r\n\r\n                        // Append form data dynamically\r\n                        formFields.forEach(\r\n                            (field) =>\r\n                                form[field].value.trim() &&\r\n                                customerFormData.append(\r\n                                    field,\r\n                                    form[field].value.trim()\r\n                                )\r\n                        );\r\n\r\n                        // Append avatar\r\n                        if (form.avatar.files.length > 0) {\r\n                            customerFormData.append(\r\n                                'avatar',\r\n                                form.avatar.files[0]\r\n                            );\r\n                        }\r\n\r\n                        // Check axios library docs: https://axios-http.com/docs/intro\r\n                        axios\r\n                            .patch(\r\n                                submitButton\r\n                                    .closest('form')\r\n                                    .getAttribute('action'),\r\n                                customerFormData\r\n                            )\r\n                            .then((response) => {\r\n                                Swal.fire({\r\n                                    text:\r\n                                        response?.data?.message ||\r\n                                        'Form has been successfully submitted!',\r\n                                    icon: 'success',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                    allowOutsideClick: false,\r\n                                }).then((result) => {\r\n                                    // Get the redirect URL from the form\r\n                                    const redirectUrl = form.getAttribute(\r\n                                        'data-kt-redirect-url'\r\n                                    );\r\n\r\n                                    if (result.isConfirmed && redirectUrl) {\r\n                                        modal.hide();\r\n                                        location.href = redirectUrl;\r\n                                    }\r\n                                });\r\n                            })\r\n                            .catch((error) => {\r\n                                const errors = error.response?.data?.message\r\n                                    ? error.response?.data?.message\r\n                                    : error?.response?.data?.errors;\r\n\r\n                                Swal.fire({\r\n                                    html: `${\r\n                                        errors instanceof Array\r\n                                            ? `<ul class=\"text-start\">${Object.values(\r\n                                                  error.response.data.errors\r\n                                              )\r\n                                                  .map(\r\n                                                      (err) =>\r\n                                                          `<li>${err?.message}</li>`\r\n                                                  )\r\n                                                  .join('')}</ul>`\r\n                                            : errors\r\n                                    }`,\r\n                                    icon: 'error',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                });\r\n                            })\r\n                            .then(() => {\r\n                                // Hide loading indication\r\n                                submitButton.removeAttribute(\r\n                                    'data-kt-indicator'\r\n                                );\r\n\r\n                                // Enable button\r\n                                submitButton.disabled = false;\r\n                            });\r\n                    } else {\r\n                        Swal.fire({\r\n                            text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                            icon: 'error',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn btn-primary',\r\n                            },\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        cancelButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: 'Are you sure you would like to cancel?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: 'Yes, cancel it!',\r\n                cancelButtonText: 'No, return',\r\n                customClass: {\r\n                    confirmButton: 'btn btn-primary',\r\n                    cancelButton: 'btn btn-active-light',\r\n                },\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\r\n                    modal.hide(); // Hide modal\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: 'Your form has not been cancelled!.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        closeButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: 'Are you sure you would like to cancel?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: 'Yes, cancel it!',\r\n                cancelButtonText: 'No, return',\r\n                customClass: {\r\n                    confirmButton: 'btn btn-primary',\r\n                    cancelButton: 'btn btn-active-light',\r\n                },\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\r\n                    modal.hide(); // Hide modal\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: 'Your form has not been cancelled!.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    return {\r\n        // Public functions\r\n        init: function () {\r\n            // Elements\r\n            element = document.querySelector('#kt_modal_update_customer');\r\n            modal = new bootstrap.Modal(element);\r\n\r\n            form = element.querySelector('#kt_modal_update_customer_form');\r\n            submitButton = form.querySelector(\r\n                '#kt_modal_update_customer_submit'\r\n            );\r\n            cancelButton = form.querySelector(\r\n                '#kt_modal_update_customer_cancel'\r\n            );\r\n            closeButton = element.querySelector(\r\n                '#kt_modal_update_customer_close'\r\n            );\r\n\r\n            initForm();\r\n        },\r\n    };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTModalUpdateCustomer.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/customers/update.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/customers/update.js"]();
/******/ 	
/******/ })()
;