/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/customers/update.js":
/*!********************************************************!*\
  !*** ../public/src/js/custom/apps/customers/update.js ***!
  \********************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTModalUpdateCustomer = (function () {\n    var element;\n    var submitButton;\n    var cancelButton;\n    var closeButton;\n    var validator;\n    var form;\n    var modal;\n\n    // Init form inputs\n    var initForm = function () {\n        // Init Datepicker --- For more info, please check Flatpickr's official documentation: https://flatpickr.js.org/\n        $('#kt_customer_birth_datepicker').flatpickr({\n            enableTime: false,\n            dateFormat: 'Y-m-d',\n            maxDate: 'today',\n        });\n\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validator = FormValidation.formValidation(form, {\n            fields: {\n                name: {\n                    validators: {\n                        notEmpty: {\n                            message: 'Customer name is required',\n                        },\n                    },\n                },\n                email: {\n                    validators: {\n                        notEmpty: {\n                            message: 'Customer email is required',\n                        },\n                        regexp: {\n                            regexp: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n                            message: 'The value is not a valid email address',\n                        },\n                    },\n                },\n                phone: {\n                    validators: {\n                        notEmpty: {\n                            message: 'Customer phone is required',\n                        },\n                    },\n                },\n                // dob: {\n                //     validators: {\n                //         notEmpty: {\n                //             message: 'Customer birth date is required',\n                //         },\n                //     },\n                // },\n                // country: {\n                //   validators: {\n                //     notEmpty: {\n                //       message: \"Country is required\",\n                //     },\n                //   },\n                // },\n                // address1: {\n                //   validators: {\n                //     notEmpty: {\n                //       message: \"Address 1 is required\",\n                //     },\n                //   },\n                // },\n                // city: {\n                //   validators: {\n                //     notEmpty: {\n                //       message: \"City is required\",\n                //     },\n                //   },\n                // },\n                // state: {\n                //   validators: {\n                //     notEmpty: {\n                //       message: \"State is required\",\n                //     },\n                //   },\n                // },\n                // postcode: {\n                //   validators: {\n                //     notEmpty: {\n                //       message: \"Postcode is required\",\n                //     },\n                //   },\n                // },\n            },\n            plugins: {\n                trigger: new FormValidation.plugins.Trigger(),\n                bootstrap: new FormValidation.plugins.Bootstrap5({\n                    rowSelector: '.fv-row',\n                    eleInvalidClass: '',\n                    eleValidClass: '',\n                }),\n            },\n        });\n\n        // Action buttons\n        submitButton.addEventListener('click', function (e) {\n            // Prevent default button action\n            e.preventDefault();\n\n            // Validate form before submit\n            if (validator) {\n                validator.validate().then(function (status) {\n                    if (status == 'Valid') {\n                        submitButton.setAttribute('data-kt-indicator', 'on');\n\n                        // Disable submit button whilst loading\n                        submitButton.disabled = true;\n\n                        // Customer form data\n                        const customerFormData = new FormData();\n\n                        // Form fields\n                        const formFields = [\n                            'name',\n                            'email',\n                            'phone',\n                            'dob',\n                            'flyerNumber',\n                            'address',\n                            'city',\n                            'state',\n                            'country',\n                            'postalCode',\n                        ];\n\n                        // Append form data dynamically\n                        formFields.forEach(\n                            (field) =>\n                                form[field].value.trim() &&\n                                customerFormData.append(\n                                    field,\n                                    form[field].value.trim()\n                                )\n                        );\n\n                        // Append avatar\n                        if (form.avatar.files.length > 0) {\n                            customerFormData.append(\n                                'avatar',\n                                form.avatar.files[0]\n                            );\n                        }\n\n                        // Check axios library docs: https://axios-http.com/docs/intro\n                        axios\n                            .patch(\n                                submitButton\n                                    .closest('form')\n                                    .getAttribute('action'),\n                                customerFormData\n                            )\n                            .then((response) => {\n                                Swal.fire({\n                                    text:\n                                        response?.data?.message ||\n                                        'Form has been successfully submitted!',\n                                    icon: 'success',\n                                    buttonsStyling: false,\n                                    confirmButtonText: 'Ok, got it!',\n                                    customClass: {\n                                        confirmButton: 'btn btn-primary',\n                                    },\n                                    allowOutsideClick: false,\n                                }).then((result) => {\n                                    // Get the redirect URL from the form\n                                    const redirectUrl = form.getAttribute(\n                                        'data-kt-redirect-url'\n                                    );\n\n                                    if (result.isConfirmed && redirectUrl) {\n                                        modal.hide();\n                                        location.href = redirectUrl;\n                                    }\n                                });\n                            })\n                            .catch((error) => {\n                                const errors = error.response?.data?.message\n                                    ? error.response?.data?.message\n                                    : error?.response?.data?.errors;\n\n                                Swal.fire({\n                                    html: `${\n                                        errors instanceof Array\n                                            ? `<ul class=\"text-start\">${Object.values(\n                                                  error.response.data.errors\n                                              )\n                                                  .map(\n                                                      (err) =>\n                                                          `<li>${err?.message}</li>`\n                                                  )\n                                                  .join('')}</ul>`\n                                            : errors\n                                    }`,\n                                    icon: 'error',\n                                    buttonsStyling: false,\n                                    confirmButtonText: 'Ok, got it!',\n                                    customClass: {\n                                        confirmButton: 'btn btn-primary',\n                                    },\n                                });\n                            })\n                            .then(() => {\n                                // Hide loading indication\n                                submitButton.removeAttribute(\n                                    'data-kt-indicator'\n                                );\n\n                                // Enable button\n                                submitButton.disabled = false;\n                            });\n                    } else {\n                        Swal.fire({\n                            text: 'Sorry, looks like there are some errors detected, please try again.',\n                            icon: 'error',\n                            buttonsStyling: false,\n                            confirmButtonText: 'Ok, got it!',\n                            customClass: {\n                                confirmButton: 'btn btn-primary',\n                            },\n                        });\n                    }\n                });\n            }\n        });\n\n        cancelButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            Swal.fire({\n                text: 'Are you sure you would like to cancel?',\n                icon: 'warning',\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: 'Yes, cancel it!',\n                cancelButtonText: 'No, return',\n                customClass: {\n                    confirmButton: 'btn btn-primary',\n                    cancelButton: 'btn btn-active-light',\n                },\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\n                    modal.hide(); // Hide modal\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: 'Your form has not been cancelled!.',\n                        icon: 'error',\n                        buttonsStyling: false,\n                        confirmButtonText: 'Ok, got it!',\n                        customClass: {\n                            confirmButton: 'btn btn-primary',\n                        },\n                    });\n                }\n            });\n        });\n\n        closeButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            Swal.fire({\n                text: 'Are you sure you would like to cancel?',\n                icon: 'warning',\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: 'Yes, cancel it!',\n                cancelButtonText: 'No, return',\n                customClass: {\n                    confirmButton: 'btn btn-primary',\n                    cancelButton: 'btn btn-active-light',\n                },\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\n                    modal.hide(); // Hide modal\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: 'Your form has not been cancelled!.',\n                        icon: 'error',\n                        buttonsStyling: false,\n                        confirmButtonText: 'Ok, got it!',\n                        customClass: {\n                            confirmButton: 'btn btn-primary',\n                        },\n                    });\n                }\n            });\n        });\n    };\n\n    return {\n        // Public functions\n        init: function () {\n            // Elements\n            element = document.querySelector('#kt_modal_update_customer');\n            modal = new bootstrap.Modal(element);\n\n            form = element.querySelector('#kt_modal_update_customer_form');\n            submitButton = form.querySelector(\n                '#kt_modal_update_customer_submit'\n            );\n            cancelButton = form.querySelector(\n                '#kt_modal_update_customer_cancel'\n            );\n            closeButton = element.querySelector(\n                '#kt_modal_update_customer_close'\n            );\n\n            initForm();\n        },\n    };\n})();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTModalUpdateCustomer.init();\n});\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/customers/update.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/customers/update.js"]();
/******/ 	
/******/ })()
;