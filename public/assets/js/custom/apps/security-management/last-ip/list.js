/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/apps/security-management/last-ip/list.js":
/*!************************************************************************!*\
  !*** ../public/src/js/custom/apps/security-management/last-ip/list.js ***!
  \************************************************************************/
/***/ (() => {

eval("\r\n\r\nvar KTSecurityLastIPList = (function () {\r\n    // Define shared variables\r\n    var table;\r\n    var datatable;\r\n    var toolbarBase;\r\n    var toolbarSelected;\r\n    var selectedCount;\r\n\r\n    // Private functions\r\n    var initDatatable = function () {\r\n        // Set date data order\r\n        const tableRows = table.querySelectorAll('tbody tr');\r\n\r\n        tableRows.forEach((row) => {\r\n            const dateRow = row.querySelectorAll('td');\r\n            const realDate = moment(\r\n                dateRow[5].innerHTML,\r\n                'DD MMM YYYY, LT'\r\n            ).format(); // select date from 4th column in table\r\n            dateRow[5].setAttribute('data-order', realDate);\r\n        });\r\n\r\n        // Init datatable --- more info on datatables: https://datatables.net/manual/\r\n        datatable = $(table).DataTable({\r\n            info: false,\r\n            order: [],\r\n            pageLength: 10,\r\n            // lengthChange: false,\r\n            columnDefs: [\r\n                { orderable: false, targets: 0 }, // Disable ordering on column 0 (checkbox)\r\n                { orderable: false, targets: 6 }, // Disable ordering on column 6 (actions)\r\n            ],\r\n        });\r\n\r\n        // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\r\n        datatable.on('draw', function () {\r\n            initToggleToolbar();\r\n            handleRowDeletion();\r\n            toggleToolbars();\r\n        });\r\n    };\r\n\r\n    // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n    var handleSearch = function () {\r\n        const filterSearch = document.querySelector(\r\n            '[data-kt-security-last-ip-table-filter=\"search\"]'\r\n        );\r\n        filterSearch.addEventListener('keyup', function (e) {\r\n            datatable.search(e.target.value).draw();\r\n        });\r\n    };\r\n\r\n    // Filter Datatable\r\n    var handleFilter = function () {\r\n        // Select filter options\r\n        const filterForm = document.querySelector(\r\n            '[data-kt-security-last-ip-table-filter=\"form\"]'\r\n        );\r\n        const filterButton = filterForm.querySelector(\r\n            '[data-kt-security-last-ip-table-filter=\"filter\"]'\r\n        );\r\n        const resetButton = filterForm.querySelector(\r\n            '[data-kt-security-last-ip-table-filter=\"reset\"]'\r\n        );\r\n        const selectOptions = filterForm.querySelectorAll('select');\r\n\r\n        // Filter datatable on submit\r\n        filterButton.addEventListener('click', function () {\r\n            var filterString = '';\r\n\r\n            // Get filter values\r\n            selectOptions.forEach((item, index) => {\r\n                if (item.value && item.value !== '') {\r\n                    if (index !== 0) {\r\n                        filterString += ' ';\r\n                    }\r\n\r\n                    // Build filter value options\r\n                    filterString += item.value;\r\n                }\r\n            });\r\n\r\n            // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n            datatable.search(filterString).draw();\r\n        });\r\n\r\n        // Reset datatable\r\n        resetButton.addEventListener('click', function () {\r\n            // Reset filter form\r\n            selectOptions.forEach((item, index) => {\r\n                // Reset Select2 dropdown --- official docs reference: https://select2.org/programmatic-control/add-select-clear-items\r\n                $(item).val(null).trigger('change');\r\n            });\r\n\r\n            // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n            datatable.search('').draw();\r\n        });\r\n    };\r\n\r\n    // Delete subscirption\r\n    var handleRowDeletion = function () {\r\n        // Select all delete buttons\r\n        const deleteButtons = table.querySelectorAll(\r\n            '[data-kt-security-last-ip-table-filter=\"delete_row\"]'\r\n        );\r\n\r\n        deleteButtons.forEach((d) => {\r\n            // Delete button on click\r\n            d.addEventListener('click', function (e) {\r\n                e.preventDefault();\r\n\r\n                // Select parent row\r\n                const parent = e.target.closest('tr');\r\n\r\n                // Get customer name\r\n                const customerName = parent.querySelectorAll('td')[1].innerText;\r\n\r\n                // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\r\n                Swal.fire({\r\n                    text:\r\n                        'Are you sure you want to delete ' + customerName + '?',\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    buttonsStyling: false,\r\n                    confirmButtonText: 'Yes, delete!',\r\n                    cancelButtonText: 'No, cancel',\r\n                    customClass: {\r\n                        confirmButton: 'btn fw-bold btn-danger',\r\n                        cancelButton: 'btn fw-bold btn-active-light-primary',\r\n                    },\r\n                }).then(function (result) {\r\n                    if (result.value) {\r\n                        Swal.fire({\r\n                            text: 'You have deleted ' + customerName + '!.',\r\n                            icon: 'success',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn fw-bold btn-primary',\r\n                            },\r\n                        })\r\n                            .then(function () {\r\n                                // Remove current row\r\n                                datatable.row($(parent)).remove().draw();\r\n                            })\r\n                            .then(function () {\r\n                                // Detect checked checkboxes\r\n                                toggleToolbars();\r\n                            });\r\n                    } else if (result.dismiss === 'cancel') {\r\n                        Swal.fire({\r\n                            text: customerName + ' was not deleted.',\r\n                            icon: 'error',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn fw-bold btn-primary',\r\n                            },\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    // Init toggle toolbar\r\n    var initToggleToolbar = () => {\r\n        // Toggle selected action toolbar\r\n        // Select all checkboxes\r\n        const checkboxes = table.querySelectorAll(\r\n            '.form-check-input[type=\"checkbox\"]'\r\n        );\r\n\r\n        // Select elements\r\n        toolbarBase = document.querySelector(\r\n            '[data-kt-security-last-ip-table-toolbar=\"base\"]'\r\n        );\r\n        toolbarSelected = document.querySelector(\r\n            '[data-kt-security-last-ip-table-toolbar=\"selected\"]'\r\n        );\r\n        selectedCount = document.querySelector(\r\n            '[data-kt-security-last-ip-table-select=\"selected_count\"]'\r\n        );\r\n        const deleteSelected = document.querySelector(\r\n            '[data-kt-security-last-ip-table-select=\"delete_selected\"]'\r\n        );\r\n\r\n        // Toggle delete selected toolbar\r\n        checkboxes.forEach((c) => {\r\n            // Checkbox on click event\r\n            c.addEventListener('click', function () {\r\n                setTimeout(function () {\r\n                    toggleToolbars();\r\n                }, 50);\r\n            });\r\n        });\r\n\r\n        // Deleted selected rows\r\n        deleteSelected.addEventListener('click', function () {\r\n            // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\r\n            Swal.fire({\r\n                text: 'Are you sure you want to delete selected customers?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: 'Yes, delete!',\r\n                cancelButtonText: 'No, cancel',\r\n                customClass: {\r\n                    confirmButton: 'btn fw-bold btn-danger',\r\n                    cancelButton: 'btn fw-bold btn-active-light-primary',\r\n                },\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    Swal.fire({\r\n                        text: 'You have deleted all selected customers!.',\r\n                        icon: 'success',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn fw-bold btn-primary',\r\n                        },\r\n                    })\r\n                        .then(function () {\r\n                            // Remove all selected customers\r\n                            checkboxes.forEach((c) => {\r\n                                if (c.checked) {\r\n                                    datatable\r\n                                        .row($(c.closest('tbody tr')))\r\n                                        .remove()\r\n                                        .draw();\r\n                                }\r\n                            });\r\n\r\n                            // Remove header checked box\r\n                            const headerCheckbox = table.querySelectorAll(\r\n                                '.form-check-input[type=\"checkbox\"]'\r\n                            )[0];\r\n                            headerCheckbox.checked = false;\r\n                        })\r\n                        .then(function () {\r\n                            toggleToolbars(); // Detect checked checkboxes\r\n                            initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\r\n                        });\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: 'Selected customers was not deleted.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn fw-bold btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    // Toggle toolbars\r\n    const toggleToolbars = () => {\r\n        // Select refreshed checkbox DOM elements\r\n        const allCheckboxes = table.querySelectorAll(\r\n            'tbody .form-check-input[type=\"checkbox\"]'\r\n        );\r\n\r\n        // Detect checkboxes state & count\r\n        let checkedState = false;\r\n        let count = 0;\r\n\r\n        // Count checked boxes\r\n        allCheckboxes.forEach((c) => {\r\n            if (c.checked) {\r\n                checkedState = true;\r\n                count++;\r\n            }\r\n        });\r\n\r\n        // Toggle toolbars\r\n        if (checkedState) {\r\n            selectedCount.innerHTML = count;\r\n            toolbarBase.classList.add('d-none');\r\n            toolbarSelected.classList.remove('d-none');\r\n        } else {\r\n            toolbarBase.classList.remove('d-none');\r\n            toolbarSelected.classList.add('d-none');\r\n        }\r\n    };\r\n\r\n    // Init flatpickr --- more info: https://flatpickr.js.org/\r\n    var initFlatpickr = function () {\r\n        // Select date from input\r\n        const datepicker = document.querySelector(\r\n            '[data-kt-security-last-ip-table-filter=\"date\"]'\r\n        );\r\n\r\n        // Init flatpickr\r\n        $(datepicker).flatpickr({\r\n            altInput: true,\r\n            altFormat: 'F j, Y',\r\n            dateFormat: 'Y-m-d',\r\n            mode: 'range',\r\n        });\r\n    };\r\n\r\n    // Block ip\r\n    const blockBtnInt = async () => {\r\n        // Use querySelectorAll to select all matching elements\r\n        const blockBtns = document.querySelectorAll(\r\n            '[data-kt-block-btn=\"block-btn\"]'\r\n        );\r\n\r\n        // Check if there are any buttons found\r\n        if (blockBtns.length === 0) {\r\n            return;\r\n        }\r\n        blockBtns.forEach((button) => {\r\n            button.addEventListener('click', async () => {\r\n                const url = button.getAttribute('data-kt-block-url');\r\n\r\n                try {\r\n                    const response = await axios.patch(url, {\r\n                        status: 'blocked',\r\n                    });\r\n\r\n                    // Display success message\r\n                    Swal.fire({\r\n                        text:\r\n                            response?.data?.message ||\r\n                            'Status has been updated successfully!',\r\n                        icon: 'success',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                        allowOutsideClick: false,\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed) {\r\n                            // Reload the page after confirmation\r\n                            location.reload();\r\n                        }\r\n                    });\r\n                } catch (error) {\r\n                    // Display error message\r\n                    const errors =\r\n                        error.response?.data?.message ||\r\n                        error.response?.data?.errors;\r\n\r\n                    Swal.fire({\r\n                        html:\r\n                            errors instanceof Array\r\n                                ? `<ul class=\"text-start\">${Object.values(\r\n                                      error.response.data.errors\r\n                                  )\r\n                                      .map((err) => `<li>${err?.message}</li>`)\r\n                                      .join('')}</ul>`\r\n                                : errors,\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    return {\r\n        // Public functions\r\n        init: function () {\r\n            table = document.getElementById('kt_security_last_ip_table');\r\n\r\n            if (!table) {\r\n                return;\r\n            }\r\n\r\n            initDatatable();\r\n            initToggleToolbar();\r\n            blockBtnInt();\r\n            handleSearch();\r\n            handleRowDeletion();\r\n            handleFilter();\r\n            initFlatpickr();\r\n        },\r\n    };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTSecurityLastIPList.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/apps/security-management/last-ip/list.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/apps/security-management/last-ip/list.js"]();
/******/ 	
/******/ })()
;