/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../public/src/js/custom/authentication/sign-up/general.js":
/*!*****************************************************************!*\
  !*** ../public/src/js/custom/authentication/sign-up/general.js ***!
  \*****************************************************************/
/***/ (() => {

eval("// Class definition\r\nconst KTSignupGeneral = (function () {\r\n    // Elements\r\n    let form;\r\n    let submitButton;\r\n    let validator;\r\n    let passwordMeter;\r\n\r\n    // Handle form\r\n    const handleForm = function (e) {\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        validator = FormValidation.formValidation(form, {\r\n            fields: {\r\n                name: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Name is required',\r\n                        },\r\n                    },\r\n                },\r\n                email: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Email address is required',\r\n                        },\r\n                        regexp: {\r\n                            regexp: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                            message: 'The value is not a valid email address',\r\n                        },\r\n                    },\r\n                },\r\n                phone: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Phone is required',\r\n                        },\r\n                    },\r\n                },\r\n                password: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'The password is required',\r\n                        },\r\n                        callback: {\r\n                            message: 'Please enter valid password',\r\n                            callback(input) {\r\n                                if (input.value.length > 0) {\r\n                                    return validatePassword();\r\n                                }\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                'confirm-password': {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'The password confirmation is required',\r\n                        },\r\n                        identical: {\r\n                            compare() {\r\n                                return form.querySelector('[name=\"password\"]')\r\n                                    .value;\r\n                            },\r\n                            message:\r\n                                'The password and its confirm are not the same',\r\n                        },\r\n                    },\r\n                },\r\n                toc: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'You must accept the terms and conditions',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            plugins: {\r\n                trigger: new FormValidation.plugins.Trigger({\r\n                    event: {\r\n                        password: false,\r\n                    },\r\n                }),\r\n                bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                    rowSelector: '.fv-row',\r\n                    eleInvalidClass: '', // comment to enable invalid state icons\r\n                    eleValidClass: '', // comment to enable valid state icons\r\n                }),\r\n            },\r\n        });\r\n\r\n        // Handle form submit\r\n        submitButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            validator.revalidateField('password');\r\n\r\n            validator.validate().then((status) => {\r\n                if (status == 'Valid') {\r\n                    // Show loading indication\r\n                    submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                    // Disable button to avoid multiple click\r\n                    submitButton.disabled = true;\r\n\r\n                    // Simulate ajax request\r\n                    setTimeout(() => {\r\n                        // Hide loading indication\r\n                        submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                        // Enable button\r\n                        submitButton.disabled = false;\r\n\r\n                        // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        Swal.fire({\r\n                            text: 'Form has been successfully submitted!',\r\n                            icon: 'success',\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: 'Ok, got it!',\r\n                            customClass: {\r\n                                confirmButton: 'btn btn-primary',\r\n                            },\r\n                            allowOutsideClick: false,\r\n                        }).then((result) => {\r\n                            if (result.isConfirmed) {\r\n                                form.reset(); // reset form\r\n                                passwordMeter.reset(); // reset password meter\r\n                                // form.submit();\r\n\r\n                                // form.submit(); // submit form\r\n                                const redirectUrl = form.getAttribute(\r\n                                    'data-kt-redirect-url'\r\n                                );\r\n                                if (redirectUrl) {\r\n                                    location.href = redirectUrl;\r\n                                }\r\n                            }\r\n                        });\r\n                    }, 1500);\r\n                } else {\r\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                    Swal.fire({\r\n                        text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Handle password input\r\n        form.querySelector('input[name=\"password\"]').addEventListener(\r\n            'input',\r\n            function () {\r\n                if (this.value.length > 0) {\r\n                    validator.updateFieldStatus('password', 'NotValidated');\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    // Handle form ajax\r\n    const handleFormAjax = function (e) {\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        validator = FormValidation.formValidation(form, {\r\n            fields: {\r\n                name: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Name is required',\r\n                        },\r\n                    },\r\n                },\r\n                email: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Email address is required',\r\n                        },\r\n                        regexp: {\r\n                            regexp: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                            message: 'The value is not a valid email address',\r\n                        },\r\n                    },\r\n                },\r\n                password: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'The password is required',\r\n                        },\r\n                        callback: {\r\n                            message: 'Please enter valid password',\r\n                            callback(input) {\r\n                                if (input.value.length > 0) {\r\n                                    return validatePassword();\r\n                                }\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                password_confirmation: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'The password confirmation is required',\r\n                        },\r\n                        identical: {\r\n                            compare() {\r\n                                return form.querySelector('[name=\"password\"]')\r\n                                    .value;\r\n                            },\r\n                            message:\r\n                                'The password and its confirm are not the same',\r\n                        },\r\n                    },\r\n                },\r\n                toc: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'You must accept the terms and conditions',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            plugins: {\r\n                trigger: new FormValidation.plugins.Trigger({\r\n                    event: {\r\n                        password: false,\r\n                    },\r\n                }),\r\n                bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                    rowSelector: '.fv-row',\r\n                    eleInvalidClass: '', // comment to enable invalid state icons\r\n                    eleValidClass: '', // comment to enable valid state icons\r\n                }),\r\n            },\r\n        });\r\n\r\n        // Handle form submit\r\n        submitButton.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            validator.revalidateField('password');\r\n\r\n            validator.validate().then((status) => {\r\n                if (status == 'Valid') {\r\n                    // Show loading indication\r\n                    submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                    // Disable button to avoid multiple click\r\n                    submitButton.disabled = true;\r\n\r\n                    // Check axios library docs: https://axios-http.com/docs/intro\r\n                    axios\r\n                        .post(\r\n                            submitButton.closest('form').getAttribute('action'),\r\n                            {\r\n                                name: form.name.value,\r\n                                email: form.email.value,\r\n                                phone: form.phone.value,\r\n                                password: form.password.value,\r\n                            }\r\n                        )\r\n                        .then((response) => {\r\n                            if (response) {\r\n                                Swal.fire({\r\n                                    text: 'Please check your inbox and click on the link to verify your email address.',\r\n                                    icon: 'success',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                    allowOutsideClick: false,\r\n                                }).then((result) => {\r\n                                    // Reset form\r\n                                    form.reset();\r\n\r\n                                    // Get the redirect URL from the form\r\n                                    const redirectUrl = form.getAttribute(\r\n                                        'data-kt-redirect-url'\r\n                                    );\r\n\r\n                                    if (result.isConfirmed && redirectUrl) {\r\n                                        location.href = redirectUrl;\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                                Swal.fire({\r\n                                    text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                                    icon: 'error',\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: 'Ok, got it!',\r\n                                    customClass: {\r\n                                        confirmButton: 'btn btn-primary',\r\n                                    },\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            const errors = error.response?.data?.message\r\n                                ? error.response?.data?.message\r\n                                : error?.response?.data?.errors;\r\n\r\n                            Swal.fire({\r\n                                html: `${\r\n                                    errors instanceof Array\r\n                                        ? `<h2><ul class=\"text-start\">${Object.values(\r\n                                              error.response.data.errors\r\n                                          )\r\n                                              .map(\r\n                                                  (err) =>\r\n                                                      `<li>${err?.message}</li>`\r\n                                              )\r\n                                              .join('')}</ul>`\r\n                                        : errors\r\n                                }`,\r\n                                icon: 'error',\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: 'Ok, got it!',\r\n                                customClass: {\r\n                                    confirmButton: 'btn btn-primary',\r\n                                },\r\n                            });\r\n                        })\r\n                        .then(() => {\r\n                            // Hide loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n                        });\r\n                } else {\r\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                    Swal.fire({\r\n                        text: 'Sorry, looks like there are some errors detected, please try again.',\r\n                        icon: 'error',\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: 'Ok, got it!',\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-primary',\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Handle password input\r\n        form.querySelector('input[name=\"password\"]').addEventListener(\r\n            'input',\r\n            function () {\r\n                if (this.value.length > 0) {\r\n                    validator.updateFieldStatus('password', 'NotValidated');\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    // Password input validation\r\n    var validatePassword = function () {\r\n        return passwordMeter.getScore() > 50;\r\n    };\r\n\r\n    const isValidUrl = function (url) {\r\n        try {\r\n            new URL(url);\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    // Public functions\r\n    return {\r\n        // Initialization\r\n        init() {\r\n            // Elements\r\n            form = document.querySelector('#kt_sign_up_form');\r\n            submitButton = document.querySelector('#kt_sign_up_submit');\r\n            passwordMeter = KTPasswordMeter.getInstance(\r\n                form.querySelector('[data-kt-password-meter=\"true\"]')\r\n            );\r\n\r\n            // if (isValidUrl(submitButton.closest('form').getAttribute('action'))) {\r\n            handleFormAjax();\r\n            // } else {\r\n            //     handleForm();\r\n            // }\r\n        },\r\n    };\r\n})();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(() => {\r\n    KTSignupGeneral.init();\r\n});\r\n\n\n//# sourceURL=webpack://besttripbd/../public/src/js/custom/authentication/sign-up/general.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../public/src/js/custom/authentication/sign-up/general.js"]();
/******/ 	
/******/ })()
;